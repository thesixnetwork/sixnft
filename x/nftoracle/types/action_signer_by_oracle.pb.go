// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftoracle/action_signer_by_oracle.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActionSignerByOracle struct {
	Id                    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActorAddress          string `protobuf:"bytes,2,opt,name=actorAddress,proto3" json:"actorAddress,omitempty"`
	OwnerAddress          string `protobuf:"bytes,3,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	CreateAt              string `protobuf:"bytes,4,opt,name=createAt,proto3" json:"createAt,omitempty"`
	ExpireAt              string `protobuf:"bytes,5,opt,name=expireAt,proto3" json:"expireAt,omitempty"`
	Caller                string `protobuf:"bytes,6,opt,name=caller,proto3" json:"caller,omitempty"`
	RequiredConfirm       uint64 `protobuf:"varint,7,opt,name=requiredConfirm,proto3" json:"requiredConfirm,omitempty"`
	Status                string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	CurrentConfirm        uint64 `protobuf:"varint,9,opt,name=currentConfirm,proto3" json:"currentConfirm,omitempty"`
	Confirmers            string `protobuf:"bytes,10,opt,name=confirmers,proto3" json:"confirmers,omitempty"`
	CreatedAt             string `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ValidUntil            string `protobuf:"bytes,12,opt,name=validUntil,proto3" json:"validUntil,omitempty"`
	DataHashes            string `protobuf:"bytes,13,opt,name=dataHashes,proto3" json:"dataHashes,omitempty"`
	ExpiredHeight         int32  `protobuf:"varint,14,opt,name=expiredHeight,proto3" json:"expiredHeight,omitempty"`
	ExecutionErrorMessage string `protobuf:"bytes,15,opt,name=executionErrorMessage,proto3" json:"executionErrorMessage,omitempty"`
}

func (m *ActionSignerByOracle) Reset()         { *m = ActionSignerByOracle{} }
func (m *ActionSignerByOracle) String() string { return proto.CompactTextString(m) }
func (*ActionSignerByOracle) ProtoMessage()    {}
func (*ActionSignerByOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f0bfb1337d525f7, []int{0}
}
func (m *ActionSignerByOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSignerByOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSignerByOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionSignerByOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSignerByOracle.Merge(m, src)
}
func (m *ActionSignerByOracle) XXX_Size() int {
	return m.Size()
}
func (m *ActionSignerByOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSignerByOracle.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSignerByOracle proto.InternalMessageInfo

func (m *ActionSignerByOracle) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActionSignerByOracle) GetActorAddress() string {
	if m != nil {
		return m.ActorAddress
	}
	return ""
}

func (m *ActionSignerByOracle) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *ActionSignerByOracle) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *ActionSignerByOracle) GetExpireAt() string {
	if m != nil {
		return m.ExpireAt
	}
	return ""
}

func (m *ActionSignerByOracle) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *ActionSignerByOracle) GetRequiredConfirm() uint64 {
	if m != nil {
		return m.RequiredConfirm
	}
	return 0
}

func (m *ActionSignerByOracle) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ActionSignerByOracle) GetCurrentConfirm() uint64 {
	if m != nil {
		return m.CurrentConfirm
	}
	return 0
}

func (m *ActionSignerByOracle) GetConfirmers() string {
	if m != nil {
		return m.Confirmers
	}
	return ""
}

func (m *ActionSignerByOracle) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ActionSignerByOracle) GetValidUntil() string {
	if m != nil {
		return m.ValidUntil
	}
	return ""
}

func (m *ActionSignerByOracle) GetDataHashes() string {
	if m != nil {
		return m.DataHashes
	}
	return ""
}

func (m *ActionSignerByOracle) GetExpiredHeight() int32 {
	if m != nil {
		return m.ExpiredHeight
	}
	return 0
}

func (m *ActionSignerByOracle) GetExecutionErrorMessage() string {
	if m != nil {
		return m.ExecutionErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ActionSignerByOracle)(nil), "thesixnetwork.sixnft.nftoracle.ActionSignerByOracle")
}

func init() {
	proto.RegisterFile("nftoracle/action_signer_by_oracle.proto", fileDescriptor_8f0bfb1337d525f7)
}

var fileDescriptor_8f0bfb1337d525f7 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6a, 0x53, 0x41,
	0x14, 0x87, 0x73, 0x63, 0x1a, 0x9b, 0xb1, 0x4d, 0x61, 0x50, 0x19, 0x44, 0x86, 0x50, 0x44, 0xb3,
	0xca, 0x45, 0xf4, 0x05, 0x52, 0x11, 0x0a, 0x22, 0x42, 0xc4, 0x8d, 0x9b, 0x30, 0x99, 0x39, 0x49,
	0x06, 0x6f, 0x67, 0xe2, 0x99, 0x73, 0x6d, 0xb2, 0xf5, 0x09, 0x7c, 0x2c, 0x97, 0x5d, 0xba, 0x94,
	0xe4, 0x45, 0x64, 0x66, 0x6c, 0xd2, 0x84, 0xee, 0xce, 0xf9, 0xbe, 0x73, 0x7e, 0xdc, 0x3f, 0x87,
	0xbd, 0x72, 0x53, 0xf2, 0xa8, 0x74, 0x05, 0xa5, 0xd2, 0x64, 0xbd, 0x1b, 0x07, 0x3b, 0x73, 0x80,
	0xe3, 0xc9, 0x6a, 0x9c, 0xf9, 0x60, 0x81, 0x9e, 0x3c, 0x97, 0x34, 0x87, 0x60, 0x97, 0x0e, 0xe8,
	0xda, 0xe3, 0xb7, 0x41, 0x2c, 0xa7, 0x34, 0xd8, 0x6e, 0x9f, 0xff, 0x6c, 0xb1, 0xc7, 0xc3, 0x94,
	0xf0, 0x39, 0x05, 0x5c, 0xac, 0x3e, 0x25, 0xc1, 0xbb, 0xac, 0x69, 0x8d, 0x28, 0x7a, 0x45, 0xbf,
	0x35, 0x6a, 0x5a, 0xc3, 0xcf, 0xd9, 0x89, 0xd2, 0xe4, 0x71, 0x68, 0x0c, 0x42, 0x08, 0xa2, 0xd9,
	0x2b, 0xfa, 0x9d, 0xd1, 0x1e, 0x8b, 0x33, 0xfe, 0xda, 0xc1, 0x76, 0xe6, 0x41, 0x9e, 0xb9, 0xcb,
	0xf8, 0x33, 0x76, 0xac, 0x11, 0x14, 0xc1, 0x90, 0x44, 0x2b, 0xf9, 0x6d, 0x1f, 0x1d, 0x2c, 0x17,
	0x16, 0xa3, 0x3b, 0xca, 0xee, 0xb6, 0xe7, 0x4f, 0x59, 0x5b, 0xab, 0xaa, 0x02, 0x14, 0xed, 0x64,
	0xfe, 0x77, 0xbc, 0xcf, 0xce, 0x10, 0xbe, 0xd7, 0x16, 0xc1, 0xbc, 0xf3, 0x6e, 0x6a, 0xf1, 0x4a,
	0x3c, 0x4c, 0x0f, 0x7d, 0x88, 0x63, 0x42, 0x20, 0x45, 0x75, 0x10, 0xc7, 0x39, 0x21, 0x77, 0xfc,
	0x25, 0xeb, 0xea, 0x1a, 0x11, 0x1c, 0xdd, 0x06, 0x74, 0x52, 0xc0, 0x01, 0xe5, 0x92, 0x31, 0x9d,
	0x4b, 0xc0, 0x20, 0x58, 0xca, 0xb8, 0x43, 0xf8, 0x73, 0xd6, 0xc9, 0x6f, 0x62, 0x86, 0x24, 0x1e,
	0x25, 0xbd, 0x03, 0x71, 0xfb, 0x87, 0xaa, 0xac, 0xf9, 0xe2, 0xc8, 0x56, 0xe2, 0x24, 0x6f, 0xef,
	0x48, 0xf4, 0x46, 0x91, 0xba, 0x54, 0x61, 0x0e, 0x41, 0x9c, 0x66, 0xbf, 0x23, 0xfc, 0x05, 0x3b,
	0xcd, 0xdf, 0xc2, 0x5c, 0x82, 0x9d, 0xcd, 0x49, 0x74, 0x7b, 0x45, 0xff, 0x68, 0xb4, 0x0f, 0xf9,
	0x5b, 0xf6, 0x04, 0x96, 0xa0, 0xeb, 0xf8, 0x43, 0xdf, 0x23, 0x7a, 0xfc, 0x08, 0x21, 0xa8, 0x19,
	0x88, 0xb3, 0x14, 0x78, 0xbf, 0xbc, 0xf8, 0xf0, 0x7b, 0x2d, 0x8b, 0x9b, 0xb5, 0x2c, 0xfe, 0xae,
	0x65, 0xf1, 0x6b, 0x23, 0x1b, 0x37, 0x1b, 0xd9, 0xf8, 0xb3, 0x91, 0x8d, 0xaf, 0xaf, 0x67, 0x96,
	0xe6, 0xf5, 0x64, 0xa0, 0xfd, 0x55, 0xb9, 0x77, 0x49, 0x65, 0xbe, 0xa4, 0x72, 0x59, 0xee, 0x2e,
	0x91, 0x56, 0x0b, 0x08, 0x93, 0x76, 0x3a, 0xbc, 0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89,
	0x93, 0xff, 0xb0, 0xa3, 0x02, 0x00, 0x00,
}

func (m *ActionSignerByOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSignerByOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionSignerByOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionErrorMessage) > 0 {
		i -= len(m.ExecutionErrorMessage)
		copy(dAtA[i:], m.ExecutionErrorMessage)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.ExecutionErrorMessage)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ExpiredHeight != 0 {
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(m.ExpiredHeight))
		i--
		dAtA[i] = 0x70
	}
	if len(m.DataHashes) > 0 {
		i -= len(m.DataHashes)
		copy(dAtA[i:], m.DataHashes)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.DataHashes)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ValidUntil) > 0 {
		i -= len(m.ValidUntil)
		copy(dAtA[i:], m.ValidUntil)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.ValidUntil)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Confirmers) > 0 {
		i -= len(m.Confirmers)
		copy(dAtA[i:], m.Confirmers)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.Confirmers)))
		i--
		dAtA[i] = 0x52
	}
	if m.CurrentConfirm != 0 {
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(m.CurrentConfirm))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if m.RequiredConfirm != 0 {
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(m.RequiredConfirm))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExpireAt) > 0 {
		i -= len(m.ExpireAt)
		copy(dAtA[i:], m.ExpireAt)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.ExpireAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreateAt) > 0 {
		i -= len(m.CreateAt)
		copy(dAtA[i:], m.CreateAt)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.CreateAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActorAddress) > 0 {
		i -= len(m.ActorAddress)
		copy(dAtA[i:], m.ActorAddress)
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(len(m.ActorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActionSignerByOracle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActionSignerByOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovActionSignerByOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionSignerByOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActionSignerByOracle(uint64(m.Id))
	}
	l = len(m.ActorAddress)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.CreateAt)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.ExpireAt)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	if m.RequiredConfirm != 0 {
		n += 1 + sovActionSignerByOracle(uint64(m.RequiredConfirm))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	if m.CurrentConfirm != 0 {
		n += 1 + sovActionSignerByOracle(uint64(m.CurrentConfirm))
	}
	l = len(m.Confirmers)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.ValidUntil)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	l = len(m.DataHashes)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	if m.ExpiredHeight != 0 {
		n += 1 + sovActionSignerByOracle(uint64(m.ExpiredHeight))
	}
	l = len(m.ExecutionErrorMessage)
	if l > 0 {
		n += 1 + l + sovActionSignerByOracle(uint64(l))
	}
	return n
}

func sovActionSignerByOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActionSignerByOracle(x uint64) (n int) {
	return sovActionSignerByOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionSignerByOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionSignerByOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSignerByOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSignerByOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredConfirm", wireType)
			}
			m.RequiredConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConfirm", wireType)
			}
			m.CurrentConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidUntil = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHashes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredHeight", wireType)
			}
			m.ExpiredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActionSignerByOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionSignerByOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActionSignerByOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActionSignerByOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionSignerByOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActionSignerByOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActionSignerByOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActionSignerByOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActionSignerByOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActionSignerByOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActionSignerByOracle = fmt.Errorf("proto: unexpected end of group")
)
