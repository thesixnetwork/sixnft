// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftoracle/action_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActionRequest struct {
	Id              uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NftSchemaCode   string          `protobuf:"bytes,2,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId         string          `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	ActionName      string          `protobuf:"bytes,4,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	Caller          string          `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	RequiredConfirm uint64          `protobuf:"varint,6,opt,name=required_confirm,json=requiredConfirm,proto3" json:"required_confirm,omitempty"`
	Status          RequestStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=sixnft.nftoracle.RequestStatus" json:"status,omitempty"`
	CurrentConfirm  uint64          `protobuf:"varint,8,opt,name=current_confirm,json=currentConfirm,proto3" json:"current_confirm,omitempty"`
	Confirmers      map[string]bool `protobuf:"bytes,9,rep,name=confirmers,proto3" json:"confirmers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CreatedAt       time.Time       `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	ValidUntil      time.Time       `protobuf:"bytes,11,opt,name=valid_until,json=validUntil,proto3,stdtime" json:"valid_until"`
	DataHashes      []*DataHash     `protobuf:"bytes,12,rep,name=data_hashes,json=dataHashes,proto3" json:"data_hashes,omitempty"`
	ExpiredHeight   int64           `protobuf:"varint,13,opt,name=expired_height,json=expiredHeight,proto3" json:"expired_height,omitempty"`
}

func (m *ActionRequest) Reset()         { *m = ActionRequest{} }
func (m *ActionRequest) String() string { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()    {}
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36b7260720dc8e70, []int{0}
}
func (m *ActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRequest.Merge(m, src)
}
func (m *ActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRequest proto.InternalMessageInfo

func (m *ActionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActionRequest) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *ActionRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *ActionRequest) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

func (m *ActionRequest) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *ActionRequest) GetRequiredConfirm() uint64 {
	if m != nil {
		return m.RequiredConfirm
	}
	return 0
}

func (m *ActionRequest) GetStatus() RequestStatus {
	if m != nil {
		return m.Status
	}
	return RequestStatus_PENDING
}

func (m *ActionRequest) GetCurrentConfirm() uint64 {
	if m != nil {
		return m.CurrentConfirm
	}
	return 0
}

func (m *ActionRequest) GetConfirmers() map[string]bool {
	if m != nil {
		return m.Confirmers
	}
	return nil
}

func (m *ActionRequest) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ActionRequest) GetValidUntil() time.Time {
	if m != nil {
		return m.ValidUntil
	}
	return time.Time{}
}

func (m *ActionRequest) GetDataHashes() []*DataHash {
	if m != nil {
		return m.DataHashes
	}
	return nil
}

func (m *ActionRequest) GetExpiredHeight() int64 {
	if m != nil {
		return m.ExpiredHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*ActionRequest)(nil), "sixnft.nftoracle.ActionRequest")
	proto.RegisterMapType((map[string]bool)(nil), "sixnft.nftoracle.ActionRequest.ConfirmersEntry")
}

func init() { proto.RegisterFile("nftoracle/action_request.proto", fileDescriptor_36b7260720dc8e70) }

var fileDescriptor_36b7260720dc8e70 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0x36, 0x4d, 0xc6, 0x24, 0xa9, 0x56, 0x15, 0x2c, 0x39, 0x38, 0x16, 0x12, 0x60,
	0x2e, 0xb6, 0x14, 0x0e, 0x20, 0x10, 0x87, 0x36, 0x54, 0x2a, 0x17, 0x90, 0x5c, 0xb8, 0x70, 0xb1,
	0xb6, 0xf6, 0x38, 0xb6, 0x6a, 0xef, 0x06, 0xef, 0xba, 0x4a, 0xde, 0xa2, 0x8f, 0xc1, 0xa3, 0xf4,
	0xd8, 0x23, 0x27, 0x40, 0xc9, 0x8b, 0xa0, 0xac, 0x9d, 0xf4, 0xef, 0xc4, 0x6d, 0xe6, 0x9b, 0x6f,
	0x7e, 0xbe, 0x99, 0x5d, 0xb0, 0x78, 0xac, 0x44, 0xc1, 0xc2, 0x0c, 0x3d, 0x16, 0xaa, 0x54, 0xf0,
	0xa0, 0xc0, 0x1f, 0x25, 0x4a, 0xe5, 0xce, 0x0a, 0xa1, 0x04, 0xd9, 0x97, 0xe9, 0x9c, 0xc7, 0xca,
	0xdd, 0xd2, 0x86, 0x4f, 0x6e, 0x32, 0xc4, 0x0c, 0xb9, 0x44, 0x56, 0x51, 0x6f, 0x07, 0xee, 0xd4,
	0x18, 0x1e, 0x4c, 0xc5, 0x54, 0x68, 0xd3, 0x5b, 0x5b, 0x35, 0x3a, 0x9a, 0x0a, 0x31, 0xcd, 0xd0,
	0xd3, 0xde, 0x59, 0x19, 0x7b, 0x2a, 0xcd, 0x51, 0x2a, 0x96, 0xcf, 0x2a, 0xc2, 0xb3, 0x9f, 0xbb,
	0xd0, 0x3b, 0xd4, 0x33, 0xf9, 0x55, 0x39, 0xd2, 0x87, 0x66, 0x1a, 0x51, 0xc3, 0x36, 0x9c, 0x1d,
	0xbf, 0x99, 0x46, 0xe4, 0x05, 0x0c, 0x78, 0xac, 0x02, 0x19, 0x26, 0x98, 0xb3, 0x20, 0x14, 0x11,
	0xd2, 0xa6, 0x6d, 0x38, 0x5d, 0xbf, 0xc7, 0x63, 0x75, 0xaa, 0xd1, 0x89, 0x88, 0x90, 0x3c, 0x85,
	0x8e, 0x12, 0xe7, 0xc8, 0x83, 0x34, 0xa2, 0x2d, 0x4d, 0xd8, 0xd3, 0xfe, 0xa7, 0x88, 0x8c, 0xc0,
	0xac, 0x75, 0x73, 0x96, 0x23, 0xdd, 0xd1, 0x51, 0xa8, 0xa0, 0xcf, 0x2c, 0x47, 0xf2, 0x18, 0xda,
	0x21, 0xcb, 0x32, 0x2c, 0xe8, 0xae, 0x8e, 0xd5, 0x1e, 0x79, 0x05, 0xfb, 0x6b, 0x95, 0x69, 0x81,
	0x51, 0x10, 0x0a, 0x1e, 0xa7, 0x45, 0x4e, 0xdb, 0x7a, 0xb2, 0xc1, 0x06, 0x9f, 0x54, 0x30, 0x79,
	0x03, 0x6d, 0xa9, 0x98, 0x2a, 0x25, 0xdd, 0xb3, 0x0d, 0xa7, 0x3f, 0x1e, 0xb9, 0xf7, 0x97, 0xea,
	0xd6, 0x0a, 0x4f, 0x35, 0xcd, 0xaf, 0xe9, 0xe4, 0x25, 0x0c, 0xc2, 0xb2, 0x28, 0x90, 0xab, 0x6d,
	0x8b, 0x8e, 0x6e, 0xd1, 0xaf, 0xe1, 0x4d, 0x87, 0x2f, 0x00, 0x35, 0x01, 0x0b, 0x49, 0xbb, 0x76,
	0xcb, 0x31, 0xc7, 0xde, 0xc3, 0x2e, 0x77, 0xb6, 0xe9, 0x4e, 0xb6, 0x19, 0xc7, 0x5c, 0x15, 0x0b,
	0xff, 0x56, 0x09, 0x32, 0x01, 0x08, 0x0b, 0x64, 0x0a, 0xa3, 0x80, 0x29, 0x0a, 0xb6, 0xe1, 0x98,
	0xe3, 0xa1, 0x5b, 0x5d, 0xcc, 0xdd, 0x5c, 0xcc, 0xfd, 0xba, 0xb9, 0xd8, 0x51, 0xe7, 0xea, 0xf7,
	0xa8, 0x71, 0xf9, 0x67, 0x64, 0xf8, 0xdd, 0x3a, 0xef, 0x50, 0x91, 0x63, 0x30, 0x2f, 0x58, 0x96,
	0x46, 0x41, 0xc9, 0x55, 0x9a, 0x51, 0xf3, 0x3f, 0xaa, 0x80, 0x4e, 0xfc, 0xb6, 0xce, 0x23, 0xef,
	0xc1, 0x8c, 0x98, 0x62, 0x41, 0xc2, 0x64, 0x82, 0x92, 0x3e, 0xd2, 0xea, 0x86, 0x0f, 0xd5, 0x7d,
	0x64, 0x8a, 0x9d, 0x30, 0x99, 0xf8, 0x10, 0xd5, 0x16, 0x4a, 0xf2, 0x1c, 0xfa, 0x38, 0x9f, 0xe9,
	0x2b, 0x25, 0x98, 0x4e, 0x13, 0x45, 0x7b, 0xb6, 0xe1, 0xb4, 0xfc, 0x5e, 0x8d, 0x9e, 0x68, 0x70,
	0xf8, 0x01, 0x06, 0xf7, 0xd6, 0x41, 0xf6, 0xa1, 0x75, 0x8e, 0x0b, 0xfd, 0xda, 0xba, 0xfe, 0xda,
	0x24, 0x07, 0xb0, 0x7b, 0xc1, 0xb2, 0xb2, 0x7a, 0x64, 0x1d, 0xbf, 0x72, 0xde, 0x35, 0xdf, 0x1a,
	0x47, 0xe3, 0xab, 0xa5, 0x65, 0x5c, 0x2f, 0x2d, 0xe3, 0xef, 0xd2, 0x32, 0x2e, 0x57, 0x56, 0xe3,
	0x7a, 0x65, 0x35, 0x7e, 0xad, 0xac, 0xc6, 0x77, 0x5a, 0x8d, 0xe9, 0xcd, 0xbd, 0x9b, 0xdf, 0xa1,
	0x16, 0x33, 0x94, 0x67, 0x6d, 0xbd, 0x80, 0xd7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x54,
	0xd5, 0x58, 0x82, 0x03, 0x00, 0x00,
}

func (m *ActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiredHeight != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.ExpiredHeight))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DataHashes) > 0 {
		for iNdEx := len(m.DataHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActionRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ValidUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintActionRequest(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintActionRequest(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	if len(m.Confirmers) > 0 {
		for k := range m.Confirmers {
			v := m.Confirmers[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActionRequest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActionRequest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CurrentConfirm != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.CurrentConfirm))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.RequiredConfirm != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.RequiredConfirm))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActionName) > 0 {
		i -= len(m.ActionName)
		copy(dAtA[i:], m.ActionName)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.ActionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintActionRequest(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActionRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActionRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovActionRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActionRequest(uint64(m.Id))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.ActionName)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovActionRequest(uint64(l))
	}
	if m.RequiredConfirm != 0 {
		n += 1 + sovActionRequest(uint64(m.RequiredConfirm))
	}
	if m.Status != 0 {
		n += 1 + sovActionRequest(uint64(m.Status))
	}
	if m.CurrentConfirm != 0 {
		n += 1 + sovActionRequest(uint64(m.CurrentConfirm))
	}
	if len(m.Confirmers) > 0 {
		for k, v := range m.Confirmers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovActionRequest(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovActionRequest(uint64(mapEntrySize))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovActionRequest(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidUntil)
	n += 1 + l + sovActionRequest(uint64(l))
	if len(m.DataHashes) > 0 {
		for _, e := range m.DataHashes {
			l = e.Size()
			n += 1 + l + sovActionRequest(uint64(l))
		}
	}
	if m.ExpiredHeight != 0 {
		n += 1 + sovActionRequest(uint64(m.ExpiredHeight))
	}
	return n
}

func sovActionRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActionRequest(x uint64) (n int) {
	return sovActionRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredConfirm", wireType)
			}
			m.RequiredConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConfirm", wireType)
			}
			m.CurrentConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentConfirm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmers == nil {
				m.Confirmers = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActionRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActionRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActionRequest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActionRequest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActionRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActionRequest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActionRequest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Confirmers[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ValidUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHashes = append(m.DataHashes, &DataHash{})
			if err := m.DataHashes[len(m.DataHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredHeight", wireType)
			}
			m.ExpiredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActionRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActionRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActionRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActionRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActionRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActionRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActionRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActionRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActionRequest = fmt.Errorf("proto: unexpected end of group")
)
