// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/nft_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OwnerAddressType int32

const (
	OwnerAddressType_ORIGIN_ADDRESS   OwnerAddressType = 0
	OwnerAddressType_INTERNAL_ADDRESS OwnerAddressType = 1
)

var OwnerAddressType_name = map[int32]string{
	0: "ORIGIN_ADDRESS",
	1: "INTERNAL_ADDRESS",
}

var OwnerAddressType_value = map[string]int32{
	"ORIGIN_ADDRESS":   0,
	"INTERNAL_ADDRESS": 1,
}

func (x OwnerAddressType) String() string {
	return proto.EnumName(OwnerAddressType_name, int32(x))
}

func (OwnerAddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_57c30ce621a5c153, []int{0}
}

type NftData struct {
	NftSchemaCode     string               `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId           string               `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenOwner        string               `protobuf:"bytes,3,opt,name=token_owner,json=tokenOwner,proto3" json:"token_owner,omitempty"`
	OwnerAddressType  OwnerAddressType     `protobuf:"varint,4,opt,name=owner_address_type,json=ownerAddressType,proto3,enum=sixnft.nftmngr.OwnerAddressType" json:"owner_address_type,omitempty"`
	OriginImage       string               `protobuf:"bytes,5,opt,name=origin_image,json=originImage,proto3" json:"origin_image,omitempty"`
	OnchainImage      string               `protobuf:"bytes,6,opt,name=onchain_image,json=onchainImage,proto3" json:"onchain_image,omitempty"`
	OriginAttributes  []*NftAttributeValue `protobuf:"bytes,7,rep,name=origin_attributes,json=originAttributes,proto3" json:"origin_attributes,omitempty"`
	OnchainAttributes []*NftAttributeValue `protobuf:"bytes,8,rep,name=onchain_attributes,json=onchainAttributes,proto3" json:"onchain_attributes,omitempty"`
}

func (m *NftData) Reset()         { *m = NftData{} }
func (m *NftData) String() string { return proto.CompactTextString(m) }
func (*NftData) ProtoMessage()    {}
func (*NftData) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c30ce621a5c153, []int{0}
}
func (m *NftData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftData.Merge(m, src)
}
func (m *NftData) XXX_Size() int {
	return m.Size()
}
func (m *NftData) XXX_DiscardUnknown() {
	xxx_messageInfo_NftData.DiscardUnknown(m)
}

var xxx_messageInfo_NftData proto.InternalMessageInfo

func (m *NftData) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *NftData) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *NftData) GetTokenOwner() string {
	if m != nil {
		return m.TokenOwner
	}
	return ""
}

func (m *NftData) GetOwnerAddressType() OwnerAddressType {
	if m != nil {
		return m.OwnerAddressType
	}
	return OwnerAddressType_ORIGIN_ADDRESS
}

func (m *NftData) GetOriginImage() string {
	if m != nil {
		return m.OriginImage
	}
	return ""
}

func (m *NftData) GetOnchainImage() string {
	if m != nil {
		return m.OnchainImage
	}
	return ""
}

func (m *NftData) GetOriginAttributes() []*NftAttributeValue {
	if m != nil {
		return m.OriginAttributes
	}
	return nil
}

func (m *NftData) GetOnchainAttributes() []*NftAttributeValue {
	if m != nil {
		return m.OnchainAttributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("sixnft.nftmngr.OwnerAddressType", OwnerAddressType_name, OwnerAddressType_value)
	proto.RegisterType((*NftData)(nil), "sixnft.nftmngr.NftData")
}

func init() { proto.RegisterFile("nftmngr/nft_data.proto", fileDescriptor_57c30ce621a5c153) }

var fileDescriptor_57c30ce621a5c153 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0xee, 0xd2, 0x40,
	0x10, 0xc7, 0x5b, 0xd1, 0x1f, 0xb8, 0xfc, 0xb1, 0x6c, 0x8c, 0xa9, 0x1e, 0x6a, 0xd1, 0xc4, 0x10,
	0x0f, 0x6d, 0x82, 0x57, 0x2f, 0x55, 0x88, 0x69, 0x62, 0x8a, 0x29, 0xc4, 0x83, 0x97, 0xcd, 0xd2,
	0x6e, 0xff, 0x04, 0xbb, 0x4b, 0xda, 0x41, 0xe0, 0x2d, 0x7c, 0x0b, 0x5f, 0xc5, 0x23, 0x47, 0x8f,
	0x06, 0x5e, 0xc4, 0x74, 0x5b, 0x2a, 0x72, 0xf2, 0xd8, 0xcf, 0x7c, 0x66, 0xf6, 0x9b, 0xe9, 0xa0,
	0x27, 0x3c, 0x82, 0x8c, 0xc7, 0xb9, 0xcd, 0x23, 0x20, 0x21, 0x05, 0x6a, 0x6d, 0x72, 0x01, 0x02,
	0x0f, 0x8a, 0x74, 0xcf, 0x23, 0xb0, 0xea, 0xf2, 0xb3, 0xd1, 0xb5, 0x47, 0x01, 0xf2, 0x74, 0xb5,
	0x05, 0x46, 0xbe, 0xd1, 0xaf, 0x5b, 0x56, 0xb5, 0xbc, 0xf8, 0xd1, 0x42, 0x6d, 0x2f, 0x82, 0x29,
	0x05, 0x8a, 0x5f, 0xa1, 0x47, 0xa5, 0x58, 0x04, 0x09, 0xcb, 0x28, 0x09, 0x44, 0xc8, 0x74, 0xd5,
	0x54, 0xc7, 0x0f, 0xfd, 0x3e, 0x8f, 0x60, 0x21, 0xe9, 0x7b, 0x11, 0x32, 0xfc, 0x14, 0x75, 0x40,
	0xac, 0x19, 0x27, 0x69, 0xa8, 0xdf, 0x93, 0x42, 0x5b, 0x7e, 0xbb, 0x21, 0x7e, 0x8e, 0xba, 0x55,
	0x49, 0xec, 0x38, 0xcb, 0xf5, 0x96, 0xac, 0x22, 0x89, 0xe6, 0x25, 0xc1, 0x1e, 0xc2, 0xb2, 0x44,
	0x68, 0x18, 0xe6, 0xac, 0x28, 0x08, 0x1c, 0x36, 0x4c, 0xbf, 0x6f, 0xaa, 0xe3, 0xc1, 0xc4, 0xb4,
	0xfe, 0xcd, 0x6f, 0xc9, 0x16, 0xa7, 0x12, 0x97, 0x87, 0x0d, 0xf3, 0x35, 0x71, 0x43, 0xf0, 0x08,
	0xf5, 0x44, 0x9e, 0xc6, 0x29, 0x27, 0x69, 0x46, 0x63, 0xa6, 0x3f, 0x90, 0x2f, 0x76, 0x2b, 0xe6,
	0x96, 0x08, 0xbf, 0x44, 0x7d, 0xc1, 0x83, 0x84, 0x36, 0xce, 0x9d, 0x74, 0x7a, 0x35, 0xac, 0x24,
	0x0f, 0x0d, 0xeb, 0x39, 0xcd, 0x9e, 0x0a, 0xbd, 0x6d, 0xb6, 0xc6, 0xdd, 0xc9, 0xe8, 0x36, 0x96,
	0x17, 0x81, 0x73, 0x91, 0x3e, 0x97, 0xbb, 0xf4, 0xb5, 0xaa, 0xb7, 0xa1, 0x05, 0xfe, 0x84, 0xf0,
	0xe5, 0xd1, 0xab, 0x81, 0x9d, 0xff, 0x1d, 0x38, 0xac, 0x9b, 0xff, 0x4e, 0x7c, 0xfd, 0x16, 0x69,
	0xb7, 0xfb, 0xc0, 0x18, 0x0d, 0xe6, 0xbe, 0xfb, 0xc1, 0xf5, 0x88, 0x33, 0x9d, 0xfa, 0xb3, 0xc5,
	0x42, 0x53, 0xf0, 0x63, 0xa4, 0xb9, 0xde, 0x72, 0xe6, 0x7b, 0xce, 0xc7, 0x86, 0xaa, 0xef, 0xdc,
	0x9f, 0x27, 0x43, 0x3d, 0x9e, 0x0c, 0xf5, 0xf7, 0xc9, 0x50, 0xbf, 0x9f, 0x0d, 0xe5, 0x78, 0x36,
	0x94, 0x5f, 0x67, 0x43, 0xf9, 0x62, 0xc7, 0x29, 0x24, 0xdb, 0x95, 0x15, 0x88, 0xcc, 0x86, 0x84,
	0x95, 0xd1, 0x18, 0xec, 0x44, 0xbe, 0xb6, 0xab, 0x94, 0xf6, 0xde, 0xbe, 0x9c, 0x51, 0xf9, 0xaf,
	0x8a, 0xd5, 0x9d, 0xbc, 0x9c, 0x37, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x67, 0x65, 0x24, 0xd2,
	0x86, 0x02, 0x00, 0x00,
}

func (m *NftData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OnchainAttributes) > 0 {
		for iNdEx := len(m.OnchainAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OnchainAttributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.OriginAttributes) > 0 {
		for iNdEx := len(m.OriginAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginAttributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OnchainImage) > 0 {
		i -= len(m.OnchainImage)
		copy(dAtA[i:], m.OnchainImage)
		i = encodeVarintNftData(dAtA, i, uint64(len(m.OnchainImage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OriginImage) > 0 {
		i -= len(m.OriginImage)
		copy(dAtA[i:], m.OriginImage)
		i = encodeVarintNftData(dAtA, i, uint64(len(m.OriginImage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OwnerAddressType != 0 {
		i = encodeVarintNftData(dAtA, i, uint64(m.OwnerAddressType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenOwner) > 0 {
		i -= len(m.TokenOwner)
		copy(dAtA[i:], m.TokenOwner)
		i = encodeVarintNftData(dAtA, i, uint64(len(m.TokenOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintNftData(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintNftData(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftData(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovNftData(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovNftData(uint64(l))
	}
	l = len(m.TokenOwner)
	if l > 0 {
		n += 1 + l + sovNftData(uint64(l))
	}
	if m.OwnerAddressType != 0 {
		n += 1 + sovNftData(uint64(m.OwnerAddressType))
	}
	l = len(m.OriginImage)
	if l > 0 {
		n += 1 + l + sovNftData(uint64(l))
	}
	l = len(m.OnchainImage)
	if l > 0 {
		n += 1 + l + sovNftData(uint64(l))
	}
	if len(m.OriginAttributes) > 0 {
		for _, e := range m.OriginAttributes {
			l = e.Size()
			n += 1 + l + sovNftData(uint64(l))
		}
	}
	if len(m.OnchainAttributes) > 0 {
		for _, e := range m.OnchainAttributes {
			l = e.Size()
			n += 1 + l + sovNftData(uint64(l))
		}
	}
	return n
}

func sovNftData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftData(x uint64) (n int) {
	return sovNftData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddressType", wireType)
			}
			m.OwnerAddressType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerAddressType |= OwnerAddressType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnchainImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginAttributes = append(m.OriginAttributes, &NftAttributeValue{})
			if err := m.OriginAttributes[len(m.OriginAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnchainAttributes = append(m.OnchainAttributes, &NftAttributeValue{})
			if err := m.OnchainAttributes[len(m.OnchainAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftData = fmt.Errorf("proto: unexpected end of group")
)
