// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AttributeLocationV1 int32

const (
	AttributeLocationV1_NFT_ATTRIBUTE   AttributeLocationV1 = 0
	AttributeLocationV1_TOKEN_ATTRIBUTE AttributeLocationV1 = 1
)

var AttributeLocationV1_name = map[int32]string{
	0: "NFT_ATTRIBUTE",
	1: "TOKEN_ATTRIBUTE",
}

var AttributeLocationV1_value = map[string]int32{
	"NFT_ATTRIBUTE":   0,
	"TOKEN_ATTRIBUTE": 1,
}

func (x AttributeLocationV1) String() string {
	return proto.EnumName(AttributeLocationV1_name, int32(x))
}

func (AttributeLocationV1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{0}
}

// cannot use TOKEN_ATTRIBUTE because it is already used in AttributeLocationV1
// that is why we use ATTRIBUTE_OF_TOKEN
type AttributeLocation int32

const (
	AttributeLocation_ATTRIBUTE_OF_SCHEMA AttributeLocation = 0
	AttributeLocation_ATTRIBUTE_OF_TOKEN  AttributeLocation = 1
)

var AttributeLocation_name = map[int32]string{
	0: "ATTRIBUTE_OF_SCHEMA",
	1: "ATTRIBUTE_OF_TOKEN",
}

var AttributeLocation_value = map[string]int32{
	"ATTRIBUTE_OF_SCHEMA": 0,
	"ATTRIBUTE_OF_TOKEN":  1,
}

func (x AttributeLocation) String() string {
	return proto.EnumName(AttributeLocation_name, int32(x))
}

func (AttributeLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{1}
}

type AuthorizeTo int32

const (
	AuthorizeTo_SYSTEM AuthorizeTo = 0
	AuthorizeTo_ALL    AuthorizeTo = 1
)

var AuthorizeTo_name = map[int32]string{
	0: "SYSTEM",
	1: "ALL",
}

var AuthorizeTo_value = map[string]int32{
	"SYSTEM": 0,
	"ALL":    1,
}

func (x AuthorizeTo) String() string {
	return proto.EnumName(AuthorizeTo_name, int32(x))
}

func (AuthorizeTo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{2}
}

type FeeSubject int32

const (
	FeeSubject_CREATE_NFT_SCHEMA FeeSubject = 0
)

var FeeSubject_name = map[int32]string{
	0: "CREATE_NFT_SCHEMA",
}

var FeeSubject_value = map[string]int32{
	"CREATE_NFT_SCHEMA": 0,
}

func (x FeeSubject) String() string {
	return proto.EnumName(FeeSubject_name, int32(x))
}

func (FeeSubject) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{3}
}

type MsgCreateNFTSchema struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaBase64 string `protobuf:"bytes,2,opt,name=nftSchemaBase64,proto3" json:"nftSchemaBase64,omitempty"`
}

func (m *MsgCreateNFTSchema) Reset()         { *m = MsgCreateNFTSchema{} }
func (m *MsgCreateNFTSchema) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNFTSchema) ProtoMessage()    {}
func (*MsgCreateNFTSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{0}
}
func (m *MsgCreateNFTSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNFTSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNFTSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNFTSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNFTSchema.Merge(m, src)
}
func (m *MsgCreateNFTSchema) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNFTSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNFTSchema.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNFTSchema proto.InternalMessageInfo

func (m *MsgCreateNFTSchema) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateNFTSchema) GetNftSchemaBase64() string {
	if m != nil {
		return m.NftSchemaBase64
	}
	return ""
}

type MsgCreateNFTSchemaResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MsgCreateNFTSchemaResponse) Reset()         { *m = MsgCreateNFTSchemaResponse{} }
func (m *MsgCreateNFTSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNFTSchemaResponse) ProtoMessage()    {}
func (*MsgCreateNFTSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{1}
}
func (m *MsgCreateNFTSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNFTSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNFTSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNFTSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNFTSchemaResponse.Merge(m, src)
}
func (m *MsgCreateNFTSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNFTSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNFTSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNFTSchemaResponse proto.InternalMessageInfo

func (m *MsgCreateNFTSchemaResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type MsgCreateMetadata struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Base64NFTData string `protobuf:"bytes,4,opt,name=base64NFTData,proto3" json:"base64NFTData,omitempty"`
}

func (m *MsgCreateMetadata) Reset()         { *m = MsgCreateMetadata{} }
func (m *MsgCreateMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMetadata) ProtoMessage()    {}
func (*MsgCreateMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{2}
}
func (m *MsgCreateMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMetadata.Merge(m, src)
}
func (m *MsgCreateMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMetadata proto.InternalMessageInfo

func (m *MsgCreateMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateMetadata) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateMetadata) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgCreateMetadata) GetBase64NFTData() string {
	if m != nil {
		return m.Base64NFTData
	}
	return ""
}

type MsgCreateMetadataResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgCreateMetadataResponse) Reset()         { *m = MsgCreateMetadataResponse{} }
func (m *MsgCreateMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMetadataResponse) ProtoMessage()    {}
func (*MsgCreateMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{3}
}
func (m *MsgCreateMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMetadataResponse.Merge(m, src)
}
func (m *MsgCreateMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMetadataResponse proto.InternalMessageInfo

func (m *MsgCreateMetadataResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateMetadataResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type MsgCreateMultiMetadata struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string   `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,3,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Base64NFTData string   `protobuf:"bytes,4,opt,name=base64NFTData,proto3" json:"base64NFTData,omitempty"`
}

func (m *MsgCreateMultiMetadata) Reset()         { *m = MsgCreateMultiMetadata{} }
func (m *MsgCreateMultiMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMultiMetadata) ProtoMessage()    {}
func (*MsgCreateMultiMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{4}
}
func (m *MsgCreateMultiMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMultiMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMultiMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMultiMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMultiMetadata.Merge(m, src)
}
func (m *MsgCreateMultiMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMultiMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMultiMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMultiMetadata proto.InternalMessageInfo

func (m *MsgCreateMultiMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateMultiMetadata) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateMultiMetadata) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgCreateMultiMetadata) GetBase64NFTData() string {
	if m != nil {
		return m.Base64NFTData
	}
	return ""
}

type MsgCreateMultiMetadataResponse struct {
	NftSchemaCode string   `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,2,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgCreateMultiMetadataResponse) Reset()         { *m = MsgCreateMultiMetadataResponse{} }
func (m *MsgCreateMultiMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMultiMetadataResponse) ProtoMessage()    {}
func (*MsgCreateMultiMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{5}
}
func (m *MsgCreateMultiMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMultiMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMultiMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMultiMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMultiMetadataResponse.Merge(m, src)
}
func (m *MsgCreateMultiMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMultiMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMultiMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMultiMetadataResponse proto.InternalMessageInfo

func (m *MsgCreateMultiMetadataResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateMultiMetadataResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

type OpenseaAttribute struct {
	TraitType string     `protobuf:"bytes,1,opt,name=trait_type,json=traitType,proto3" json:"trait_type,omitempty"`
	Value     *types.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OpenseaAttribute) Reset()         { *m = OpenseaAttribute{} }
func (m *OpenseaAttribute) String() string { return proto.CompactTextString(m) }
func (*OpenseaAttribute) ProtoMessage()    {}
func (*OpenseaAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{6}
}
func (m *OpenseaAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenseaAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenseaAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenseaAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenseaAttribute.Merge(m, src)
}
func (m *OpenseaAttribute) XXX_Size() int {
	return m.Size()
}
func (m *OpenseaAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenseaAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_OpenseaAttribute proto.InternalMessageInfo

func (m *OpenseaAttribute) GetTraitType() string {
	if m != nil {
		return m.TraitType
	}
	return ""
}

func (m *OpenseaAttribute) GetValue() *types.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdatedOpenseaAttributes struct {
	Attributes []*OpenseaAttribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *UpdatedOpenseaAttributes) Reset()         { *m = UpdatedOpenseaAttributes{} }
func (m *UpdatedOpenseaAttributes) String() string { return proto.CompactTextString(m) }
func (*UpdatedOpenseaAttributes) ProtoMessage()    {}
func (*UpdatedOpenseaAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{7}
}
func (m *UpdatedOpenseaAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatedOpenseaAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatedOpenseaAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatedOpenseaAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedOpenseaAttributes.Merge(m, src)
}
func (m *UpdatedOpenseaAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpdatedOpenseaAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedOpenseaAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedOpenseaAttributes proto.InternalMessageInfo

func (m *UpdatedOpenseaAttributes) GetAttributes() []*OpenseaAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type UpdatedOriginData struct {
	// Types that are valid to be assigned to UpdatedOriginData:
	//
	//	*UpdatedOriginData_Opensea
	UpdatedOriginData isUpdatedOriginData_UpdatedOriginData `protobuf_oneof:"updated_origin_data"`
}

func (m *UpdatedOriginData) Reset()         { *m = UpdatedOriginData{} }
func (m *UpdatedOriginData) String() string { return proto.CompactTextString(m) }
func (*UpdatedOriginData) ProtoMessage()    {}
func (*UpdatedOriginData) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{8}
}
func (m *UpdatedOriginData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatedOriginData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatedOriginData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatedOriginData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedOriginData.Merge(m, src)
}
func (m *UpdatedOriginData) XXX_Size() int {
	return m.Size()
}
func (m *UpdatedOriginData) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedOriginData.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedOriginData proto.InternalMessageInfo

type isUpdatedOriginData_UpdatedOriginData interface {
	isUpdatedOriginData_UpdatedOriginData()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdatedOriginData_Opensea struct {
	Opensea *UpdatedOpenseaAttributes `protobuf:"bytes,1,opt,name=opensea,proto3,oneof" json:"opensea,omitempty"`
}

func (*UpdatedOriginData_Opensea) isUpdatedOriginData_UpdatedOriginData() {}

func (m *UpdatedOriginData) GetUpdatedOriginData() isUpdatedOriginData_UpdatedOriginData {
	if m != nil {
		return m.UpdatedOriginData
	}
	return nil
}

func (m *UpdatedOriginData) GetOpensea() *UpdatedOpenseaAttributes {
	if x, ok := m.GetUpdatedOriginData().(*UpdatedOriginData_Opensea); ok {
		return x.Opensea
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdatedOriginData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdatedOriginData_Opensea)(nil),
	}
}

// ActionParameter
type ActionParameter struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ActionParameter) Reset()         { *m = ActionParameter{} }
func (m *ActionParameter) String() string { return proto.CompactTextString(m) }
func (*ActionParameter) ProtoMessage()    {}
func (*ActionParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{9}
}
func (m *ActionParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionParameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionParameter.Merge(m, src)
}
func (m *ActionParameter) XXX_Size() int {
	return m.Size()
}
func (m *ActionParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionParameter.DiscardUnknown(m)
}

var xxx_messageInfo_ActionParameter proto.InternalMessageInfo

func (m *ActionParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgPerformActionByAdmin struct {
	Creator       string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string             `protobuf:"bytes,2,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId       string             `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        string             `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	RefId         string             `protobuf:"bytes,5,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Parameters    []*ActionParameter `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *MsgPerformActionByAdmin) Reset()         { *m = MsgPerformActionByAdmin{} }
func (m *MsgPerformActionByAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionByAdmin) ProtoMessage()    {}
func (*MsgPerformActionByAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{10}
}
func (m *MsgPerformActionByAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionByAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionByAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionByAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionByAdmin.Merge(m, src)
}
func (m *MsgPerformActionByAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionByAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionByAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionByAdmin proto.InternalMessageInfo

func (m *MsgPerformActionByAdmin) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionByAdmin) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformActionByAdmin) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgPerformActionByAdmin) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *MsgPerformActionByAdmin) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgPerformActionByAdmin) GetParameters() []*ActionParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type MsgPerformActionByAdminResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId       string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *MsgPerformActionByAdminResponse) Reset()         { *m = MsgPerformActionByAdminResponse{} }
func (m *MsgPerformActionByAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionByAdminResponse) ProtoMessage()    {}
func (*MsgPerformActionByAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{11}
}
func (m *MsgPerformActionByAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionByAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionByAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionByAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionByAdminResponse.Merge(m, src)
}
func (m *MsgPerformActionByAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionByAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionByAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionByAdminResponse proto.InternalMessageInfo

func (m *MsgPerformActionByAdminResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformActionByAdminResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type MsgPerformMultiTokenAction struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string   `protobuf:"bytes,2,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	TokenId       []string `protobuf:"bytes,3,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,4,rep,name=action,proto3" json:"action,omitempty"`
	RefId         string   `protobuf:"bytes,5,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Parameters    string   `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *MsgPerformMultiTokenAction) Reset()         { *m = MsgPerformMultiTokenAction{} }
func (m *MsgPerformMultiTokenAction) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenAction) ProtoMessage()    {}
func (*MsgPerformMultiTokenAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{12}
}
func (m *MsgPerformMultiTokenAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenAction.Merge(m, src)
}
func (m *MsgPerformMultiTokenAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenAction proto.InternalMessageInfo

func (m *MsgPerformMultiTokenAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformMultiTokenAction) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenAction) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgPerformMultiTokenAction) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *MsgPerformMultiTokenAction) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgPerformMultiTokenAction) GetParameters() string {
	if m != nil {
		return m.Parameters
	}
	return ""
}

type MsgPerformMultiTokenActionResponse struct {
	NftSchemaCode string   `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,2,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,3,rep,name=action,proto3" json:"action,omitempty"`
}

func (m *MsgPerformMultiTokenActionResponse) Reset()         { *m = MsgPerformMultiTokenActionResponse{} }
func (m *MsgPerformMultiTokenActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenActionResponse) ProtoMessage()    {}
func (*MsgPerformMultiTokenActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{13}
}
func (m *MsgPerformMultiTokenActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenActionResponse.Merge(m, src)
}
func (m *MsgPerformMultiTokenActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenActionResponse proto.InternalMessageInfo

func (m *MsgPerformMultiTokenActionResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenActionResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgPerformMultiTokenActionResponse) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

type MsgPerformMultiTokenOneAction struct {
	Creator       string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string             `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string           `protobuf:"bytes,3,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        string             `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	RefId         string             `protobuf:"bytes,5,opt,name=refId,proto3" json:"refId,omitempty"`
	Parameters    []*ActionParameter `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *MsgPerformMultiTokenOneAction) Reset()         { *m = MsgPerformMultiTokenOneAction{} }
func (m *MsgPerformMultiTokenOneAction) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenOneAction) ProtoMessage()    {}
func (*MsgPerformMultiTokenOneAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{14}
}
func (m *MsgPerformMultiTokenOneAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenOneAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenOneAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenOneAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenOneAction.Merge(m, src)
}
func (m *MsgPerformMultiTokenOneAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenOneAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenOneAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenOneAction proto.InternalMessageInfo

func (m *MsgPerformMultiTokenOneAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformMultiTokenOneAction) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenOneAction) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgPerformMultiTokenOneAction) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *MsgPerformMultiTokenOneAction) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgPerformMultiTokenOneAction) GetParameters() []*ActionParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type MsgPerformMultiTokenOneActionResponse struct {
	NftSchemaCode string   `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,2,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgPerformMultiTokenOneActionResponse) Reset()         { *m = MsgPerformMultiTokenOneActionResponse{} }
func (m *MsgPerformMultiTokenOneActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenOneActionResponse) ProtoMessage()    {}
func (*MsgPerformMultiTokenOneActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{15}
}
func (m *MsgPerformMultiTokenOneActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenOneActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenOneActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenOneActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenOneActionResponse.Merge(m, src)
}
func (m *MsgPerformMultiTokenOneActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenOneActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenOneActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenOneActionResponse proto.InternalMessageInfo

func (m *MsgPerformMultiTokenOneActionResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenOneActionResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

type MsgPerformMultiTokenMultiAction struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string   `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,3,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,4,rep,name=action,proto3" json:"action,omitempty"`
	RefId         string   `protobuf:"bytes,5,opt,name=refId,proto3" json:"refId,omitempty"`
	Parameters    []string `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *MsgPerformMultiTokenMultiAction) Reset()         { *m = MsgPerformMultiTokenMultiAction{} }
func (m *MsgPerformMultiTokenMultiAction) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenMultiAction) ProtoMessage()    {}
func (*MsgPerformMultiTokenMultiAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{16}
}
func (m *MsgPerformMultiTokenMultiAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenMultiAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenMultiAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenMultiAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenMultiAction.Merge(m, src)
}
func (m *MsgPerformMultiTokenMultiAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenMultiAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenMultiAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenMultiAction proto.InternalMessageInfo

func (m *MsgPerformMultiTokenMultiAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformMultiTokenMultiAction) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenMultiAction) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgPerformMultiTokenMultiAction) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *MsgPerformMultiTokenMultiAction) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgPerformMultiTokenMultiAction) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type MsgPerformMultiTokenMultiActionResponse struct {
	NftSchemaCode string   `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       []string `protobuf:"bytes,2,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,3,rep,name=action,proto3" json:"action,omitempty"`
}

func (m *MsgPerformMultiTokenMultiActionResponse) Reset() {
	*m = MsgPerformMultiTokenMultiActionResponse{}
}
func (m *MsgPerformMultiTokenMultiActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformMultiTokenMultiActionResponse) ProtoMessage()    {}
func (*MsgPerformMultiTokenMultiActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{17}
}
func (m *MsgPerformMultiTokenMultiActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformMultiTokenMultiActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformMultiTokenMultiActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformMultiTokenMultiActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformMultiTokenMultiActionResponse.Merge(m, src)
}
func (m *MsgPerformMultiTokenMultiActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformMultiTokenMultiActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformMultiTokenMultiActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformMultiTokenMultiActionResponse proto.InternalMessageInfo

func (m *MsgPerformMultiTokenMultiActionResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformMultiTokenMultiActionResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *MsgPerformMultiTokenMultiActionResponse) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

type MsgPerformOneTokenMultiAction struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string   `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string   `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,4,rep,name=action,proto3" json:"action,omitempty"`
	RefId         string   `protobuf:"bytes,5,opt,name=refId,proto3" json:"refId,omitempty"`
	Parameters    []string `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *MsgPerformOneTokenMultiAction) Reset()         { *m = MsgPerformOneTokenMultiAction{} }
func (m *MsgPerformOneTokenMultiAction) String() string { return proto.CompactTextString(m) }
func (*MsgPerformOneTokenMultiAction) ProtoMessage()    {}
func (*MsgPerformOneTokenMultiAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{18}
}
func (m *MsgPerformOneTokenMultiAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformOneTokenMultiAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformOneTokenMultiAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformOneTokenMultiAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformOneTokenMultiAction.Merge(m, src)
}
func (m *MsgPerformOneTokenMultiAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformOneTokenMultiAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformOneTokenMultiAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformOneTokenMultiAction proto.InternalMessageInfo

func (m *MsgPerformOneTokenMultiAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformOneTokenMultiAction) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformOneTokenMultiAction) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgPerformOneTokenMultiAction) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *MsgPerformOneTokenMultiAction) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgPerformOneTokenMultiAction) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type MsgPerformOneTokenMultiActionResponse struct {
	NftSchemaCode string   `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string   `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Action        []string `protobuf:"bytes,3,rep,name=action,proto3" json:"action,omitempty"`
}

func (m *MsgPerformOneTokenMultiActionResponse) Reset()         { *m = MsgPerformOneTokenMultiActionResponse{} }
func (m *MsgPerformOneTokenMultiActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformOneTokenMultiActionResponse) ProtoMessage()    {}
func (*MsgPerformOneTokenMultiActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{19}
}
func (m *MsgPerformOneTokenMultiActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformOneTokenMultiActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformOneTokenMultiActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformOneTokenMultiActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformOneTokenMultiActionResponse.Merge(m, src)
}
func (m *MsgPerformOneTokenMultiActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformOneTokenMultiActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformOneTokenMultiActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformOneTokenMultiActionResponse proto.InternalMessageInfo

func (m *MsgPerformOneTokenMultiActionResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgPerformOneTokenMultiActionResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgPerformOneTokenMultiActionResponse) GetAction() []string {
	if m != nil {
		return m.Action
	}
	return nil
}

type MsgAddAttribute struct {
	Creator                     string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Code                        string            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Location                    AttributeLocation `protobuf:"varint,3,opt,name=location,proto3,enum=thesixnetwork.sixnft.nftmngr.AttributeLocation" json:"location,omitempty"`
	Base64NewAttriuteDefenition string            `protobuf:"bytes,4,opt,name=base64NewAttriuteDefenition,proto3" json:"base64NewAttriuteDefenition,omitempty"`
}

func (m *MsgAddAttribute) Reset()         { *m = MsgAddAttribute{} }
func (m *MsgAddAttribute) String() string { return proto.CompactTextString(m) }
func (*MsgAddAttribute) ProtoMessage()    {}
func (*MsgAddAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{20}
}
func (m *MsgAddAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAttribute.Merge(m, src)
}
func (m *MsgAddAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAttribute proto.InternalMessageInfo

func (m *MsgAddAttribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddAttribute) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgAddAttribute) GetLocation() AttributeLocation {
	if m != nil {
		return m.Location
	}
	return AttributeLocation_ATTRIBUTE_OF_SCHEMA
}

func (m *MsgAddAttribute) GetBase64NewAttriuteDefenition() string {
	if m != nil {
		return m.Base64NewAttriuteDefenition
	}
	return ""
}

type MsgAddAttributeResponse struct {
	Code        string       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OnchainData *OnChainData `protobuf:"bytes,3,opt,name=onchainData,proto3" json:"onchainData,omitempty"`
}

func (m *MsgAddAttributeResponse) Reset()         { *m = MsgAddAttributeResponse{} }
func (m *MsgAddAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAttributeResponse) ProtoMessage()    {}
func (*MsgAddAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{21}
}
func (m *MsgAddAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAttributeResponse.Merge(m, src)
}
func (m *MsgAddAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAttributeResponse proto.InternalMessageInfo

func (m *MsgAddAttributeResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgAddAttributeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddAttributeResponse) GetOnchainData() *OnChainData {
	if m != nil {
		return m.OnchainData
	}
	return nil
}

type MsgAddAction struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Base64NewAction string `protobuf:"bytes,3,opt,name=base64NewAction,proto3" json:"base64NewAction,omitempty"`
}

func (m *MsgAddAction) Reset()         { *m = MsgAddAction{} }
func (m *MsgAddAction) String() string { return proto.CompactTextString(m) }
func (*MsgAddAction) ProtoMessage()    {}
func (*MsgAddAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{22}
}
func (m *MsgAddAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAction.Merge(m, src)
}
func (m *MsgAddAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAction proto.InternalMessageInfo

func (m *MsgAddAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddAction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgAddAction) GetBase64NewAction() string {
	if m != nil {
		return m.Base64NewAction
	}
	return ""
}

type MsgAddActionResponse struct {
	Code        string       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OnchainData *OnChainData `protobuf:"bytes,3,opt,name=onchainData,proto3" json:"onchainData,omitempty"`
}

func (m *MsgAddActionResponse) Reset()         { *m = MsgAddActionResponse{} }
func (m *MsgAddActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddActionResponse) ProtoMessage()    {}
func (*MsgAddActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{23}
}
func (m *MsgAddActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddActionResponse.Merge(m, src)
}
func (m *MsgAddActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddActionResponse proto.InternalMessageInfo

func (m *MsgAddActionResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgAddActionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddActionResponse) GetOnchainData() *OnChainData {
	if m != nil {
		return m.OnchainData
	}
	return nil
}

type MsgSetNFTAttribute struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode           string `protobuf:"bytes,2,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	Base64NftAttributeValue string `protobuf:"bytes,3,opt,name=base64_nft_attribute_value,json=base64NftAttributeValue,proto3" json:"base64_nft_attribute_value,omitempty"`
}

func (m *MsgSetNFTAttribute) Reset()         { *m = MsgSetNFTAttribute{} }
func (m *MsgSetNFTAttribute) String() string { return proto.CompactTextString(m) }
func (*MsgSetNFTAttribute) ProtoMessage()    {}
func (*MsgSetNFTAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{24}
}
func (m *MsgSetNFTAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNFTAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNFTAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNFTAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNFTAttribute.Merge(m, src)
}
func (m *MsgSetNFTAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNFTAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNFTAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNFTAttribute proto.InternalMessageInfo

func (m *MsgSetNFTAttribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetNFTAttribute) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgSetNFTAttribute) GetBase64NftAttributeValue() string {
	if m != nil {
		return m.Base64NftAttributeValue
	}
	return ""
}

type MsgSetNFTAttributeResponse struct {
	NftSchemaCode     string `protobuf:"bytes,1,opt,name=nft_schema_code,json=nftSchemaCode,proto3" json:"nft_schema_code,omitempty"`
	AttributeName     string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	NftAttributeValue string `protobuf:"bytes,3,opt,name=nft_attribute_value,json=nftAttributeValue,proto3" json:"nft_attribute_value,omitempty"`
}

func (m *MsgSetNFTAttributeResponse) Reset()         { *m = MsgSetNFTAttributeResponse{} }
func (m *MsgSetNFTAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetNFTAttributeResponse) ProtoMessage()    {}
func (*MsgSetNFTAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{25}
}
func (m *MsgSetNFTAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNFTAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNFTAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNFTAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNFTAttributeResponse.Merge(m, src)
}
func (m *MsgSetNFTAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNFTAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNFTAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNFTAttributeResponse proto.InternalMessageInfo

func (m *MsgSetNFTAttributeResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgSetNFTAttributeResponse) GetAttributeName() string {
	if m != nil {
		return m.AttributeName
	}
	return ""
}

func (m *MsgSetNFTAttributeResponse) GetNftAttributeValue() string {
	if m != nil {
		return m.NftAttributeValue
	}
	return ""
}

type MsgSetBaseUri struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	NewBaseUri string `protobuf:"bytes,3,opt,name=newBaseUri,proto3" json:"newBaseUri,omitempty"`
}

func (m *MsgSetBaseUri) Reset()         { *m = MsgSetBaseUri{} }
func (m *MsgSetBaseUri) String() string { return proto.CompactTextString(m) }
func (*MsgSetBaseUri) ProtoMessage()    {}
func (*MsgSetBaseUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{26}
}
func (m *MsgSetBaseUri) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBaseUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBaseUri.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBaseUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBaseUri.Merge(m, src)
}
func (m *MsgSetBaseUri) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBaseUri) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBaseUri.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBaseUri proto.InternalMessageInfo

func (m *MsgSetBaseUri) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetBaseUri) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgSetBaseUri) GetNewBaseUri() string {
	if m != nil {
		return m.NewBaseUri
	}
	return ""
}

type MsgSetBaseUriResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *MsgSetBaseUriResponse) Reset()         { *m = MsgSetBaseUriResponse{} }
func (m *MsgSetBaseUriResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBaseUriResponse) ProtoMessage()    {}
func (*MsgSetBaseUriResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{27}
}
func (m *MsgSetBaseUriResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBaseUriResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBaseUriResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBaseUriResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBaseUriResponse.Merge(m, src)
}
func (m *MsgSetBaseUriResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBaseUriResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBaseUriResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBaseUriResponse proto.InternalMessageInfo

func (m *MsgSetBaseUriResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgSetBaseUriResponse) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type MsgToggleAction struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Action  string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Disable bool   `protobuf:"varint,4,opt,name=disable,proto3" json:"disable,omitempty"`
}

func (m *MsgToggleAction) Reset()         { *m = MsgToggleAction{} }
func (m *MsgToggleAction) String() string { return proto.CompactTextString(m) }
func (*MsgToggleAction) ProtoMessage()    {}
func (*MsgToggleAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{28}
}
func (m *MsgToggleAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleAction.Merge(m, src)
}
func (m *MsgToggleAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleAction proto.InternalMessageInfo

func (m *MsgToggleAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgToggleAction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgToggleAction) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *MsgToggleAction) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

type MsgToggleActionResponse struct {
	Code              string       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OnchainDataAction *OnChainData `protobuf:"bytes,3,opt,name=onchainDataAction,proto3" json:"onchainDataAction,omitempty"`
}

func (m *MsgToggleActionResponse) Reset()         { *m = MsgToggleActionResponse{} }
func (m *MsgToggleActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleActionResponse) ProtoMessage()    {}
func (*MsgToggleActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{29}
}
func (m *MsgToggleActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleActionResponse.Merge(m, src)
}
func (m *MsgToggleActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleActionResponse proto.InternalMessageInfo

func (m *MsgToggleActionResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgToggleActionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgToggleActionResponse) GetOnchainDataAction() *OnChainData {
	if m != nil {
		return m.OnchainDataAction
	}
	return nil
}

type MsgChangeSchemaOwner struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	NewOwner      string `protobuf:"bytes,3,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
}

func (m *MsgChangeSchemaOwner) Reset()         { *m = MsgChangeSchemaOwner{} }
func (m *MsgChangeSchemaOwner) String() string { return proto.CompactTextString(m) }
func (*MsgChangeSchemaOwner) ProtoMessage()    {}
func (*MsgChangeSchemaOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{30}
}
func (m *MsgChangeSchemaOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeSchemaOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeSchemaOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeSchemaOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeSchemaOwner.Merge(m, src)
}
func (m *MsgChangeSchemaOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeSchemaOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeSchemaOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeSchemaOwner proto.InternalMessageInfo

func (m *MsgChangeSchemaOwner) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgChangeSchemaOwner) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgChangeSchemaOwner) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgChangeSchemaOwnerResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	NewOwner      string `protobuf:"bytes,2,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
}

func (m *MsgChangeSchemaOwnerResponse) Reset()         { *m = MsgChangeSchemaOwnerResponse{} }
func (m *MsgChangeSchemaOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeSchemaOwnerResponse) ProtoMessage()    {}
func (*MsgChangeSchemaOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{31}
}
func (m *MsgChangeSchemaOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeSchemaOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeSchemaOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeSchemaOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeSchemaOwnerResponse.Merge(m, src)
}
func (m *MsgChangeSchemaOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeSchemaOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeSchemaOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeSchemaOwnerResponse proto.InternalMessageInfo

func (m *MsgChangeSchemaOwnerResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgChangeSchemaOwnerResponse) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgResyncAttributesResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *MsgResyncAttributesResponse) Reset()         { *m = MsgResyncAttributesResponse{} }
func (m *MsgResyncAttributesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResyncAttributesResponse) ProtoMessage()    {}
func (*MsgResyncAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{32}
}
func (m *MsgResyncAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResyncAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResyncAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResyncAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResyncAttributesResponse.Merge(m, src)
}
func (m *MsgResyncAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResyncAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResyncAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResyncAttributesResponse proto.InternalMessageInfo

func (m *MsgResyncAttributesResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type MsgShowAttributes struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode  string   `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Show           bool     `protobuf:"varint,3,opt,name=show,proto3" json:"show,omitempty"`
	AttributeNames []string `protobuf:"bytes,4,rep,name=attributeNames,proto3" json:"attributeNames,omitempty"`
}

func (m *MsgShowAttributes) Reset()         { *m = MsgShowAttributes{} }
func (m *MsgShowAttributes) String() string { return proto.CompactTextString(m) }
func (*MsgShowAttributes) ProtoMessage()    {}
func (*MsgShowAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{33}
}
func (m *MsgShowAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShowAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShowAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShowAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShowAttributes.Merge(m, src)
}
func (m *MsgShowAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MsgShowAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShowAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShowAttributes proto.InternalMessageInfo

func (m *MsgShowAttributes) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgShowAttributes) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgShowAttributes) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *MsgShowAttributes) GetAttributeNames() []string {
	if m != nil {
		return m.AttributeNames
	}
	return nil
}

type MsgShowAttributesResponse struct {
	NftSchema string `protobuf:"bytes,1,opt,name=nftSchema,proto3" json:"nftSchema,omitempty"`
}

func (m *MsgShowAttributesResponse) Reset()         { *m = MsgShowAttributesResponse{} }
func (m *MsgShowAttributesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgShowAttributesResponse) ProtoMessage()    {}
func (*MsgShowAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{34}
}
func (m *MsgShowAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShowAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShowAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShowAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShowAttributesResponse.Merge(m, src)
}
func (m *MsgShowAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgShowAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShowAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShowAttributesResponse proto.InternalMessageInfo

func (m *MsgShowAttributesResponse) GetNftSchema() string {
	if m != nil {
		return m.NftSchema
	}
	return ""
}

type MsgResyncAttributes struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	TokenId       string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgResyncAttributes) Reset()         { *m = MsgResyncAttributes{} }
func (m *MsgResyncAttributes) String() string { return proto.CompactTextString(m) }
func (*MsgResyncAttributes) ProtoMessage()    {}
func (*MsgResyncAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{35}
}
func (m *MsgResyncAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResyncAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResyncAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResyncAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResyncAttributes.Merge(m, src)
}
func (m *MsgResyncAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MsgResyncAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResyncAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResyncAttributes proto.InternalMessageInfo

func (m *MsgResyncAttributes) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgResyncAttributes) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgResyncAttributes) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type MsgSetFeeConfig struct {
	Creator            string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NewFeeConfigBase64 string     `protobuf:"bytes,2,opt,name=newFeeConfigBase64,proto3" json:"newFeeConfigBase64,omitempty"`
	FeeSubject         FeeSubject `protobuf:"varint,3,opt,name=feeSubject,proto3,enum=thesixnetwork.sixnft.nftmngr.FeeSubject" json:"feeSubject,omitempty"`
}

func (m *MsgSetFeeConfig) Reset()         { *m = MsgSetFeeConfig{} }
func (m *MsgSetFeeConfig) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeConfig) ProtoMessage()    {}
func (*MsgSetFeeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{36}
}
func (m *MsgSetFeeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeConfig.Merge(m, src)
}
func (m *MsgSetFeeConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeConfig proto.InternalMessageInfo

func (m *MsgSetFeeConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetFeeConfig) GetNewFeeConfigBase64() string {
	if m != nil {
		return m.NewFeeConfigBase64
	}
	return ""
}

func (m *MsgSetFeeConfig) GetFeeSubject() FeeSubject {
	if m != nil {
		return m.FeeSubject
	}
	return FeeSubject_CREATE_NFT_SCHEMA
}

type MsgSetFeeConfigResponse struct {
}

func (m *MsgSetFeeConfigResponse) Reset()         { *m = MsgSetFeeConfigResponse{} }
func (m *MsgSetFeeConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeConfigResponse) ProtoMessage()    {}
func (*MsgSetFeeConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{37}
}
func (m *MsgSetFeeConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeConfigResponse.Merge(m, src)
}
func (m *MsgSetFeeConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeConfigResponse proto.InternalMessageInfo

type MsgSetMintauth struct {
	Creator       string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string      `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	AuthorizeTo   AuthorizeTo `protobuf:"varint,3,opt,name=authorizeTo,proto3,enum=thesixnetwork.sixnft.nftmngr.AuthorizeTo" json:"authorizeTo,omitempty"`
}

func (m *MsgSetMintauth) Reset()         { *m = MsgSetMintauth{} }
func (m *MsgSetMintauth) String() string { return proto.CompactTextString(m) }
func (*MsgSetMintauth) ProtoMessage()    {}
func (*MsgSetMintauth) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{38}
}
func (m *MsgSetMintauth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMintauth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMintauth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMintauth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMintauth.Merge(m, src)
}
func (m *MsgSetMintauth) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMintauth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMintauth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMintauth proto.InternalMessageInfo

func (m *MsgSetMintauth) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetMintauth) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgSetMintauth) GetAuthorizeTo() AuthorizeTo {
	if m != nil {
		return m.AuthorizeTo
	}
	return AuthorizeTo_SYSTEM
}

type MsgSetMintauthResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
}

func (m *MsgSetMintauthResponse) Reset()         { *m = MsgSetMintauthResponse{} }
func (m *MsgSetMintauthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMintauthResponse) ProtoMessage()    {}
func (*MsgSetMintauthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{39}
}
func (m *MsgSetMintauthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMintauthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMintauthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMintauthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMintauthResponse.Merge(m, src)
}
func (m *MsgSetMintauthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMintauthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMintauthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMintauthResponse proto.InternalMessageInfo

func (m *MsgSetMintauthResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

type MsgChangeOrgOwner struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OrgName    string `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ToNewOwner string `protobuf:"bytes,3,opt,name=toNewOwner,proto3" json:"toNewOwner,omitempty"`
}

func (m *MsgChangeOrgOwner) Reset()         { *m = MsgChangeOrgOwner{} }
func (m *MsgChangeOrgOwner) String() string { return proto.CompactTextString(m) }
func (*MsgChangeOrgOwner) ProtoMessage()    {}
func (*MsgChangeOrgOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{40}
}
func (m *MsgChangeOrgOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeOrgOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeOrgOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeOrgOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeOrgOwner.Merge(m, src)
}
func (m *MsgChangeOrgOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeOrgOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeOrgOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeOrgOwner proto.InternalMessageInfo

func (m *MsgChangeOrgOwner) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgChangeOrgOwner) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *MsgChangeOrgOwner) GetToNewOwner() string {
	if m != nil {
		return m.ToNewOwner
	}
	return ""
}

type MsgChangeOrgOwnerResponse struct {
	OrgName  string `protobuf:"bytes,1,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OldOwner string `protobuf:"bytes,2,opt,name=oldOwner,proto3" json:"oldOwner,omitempty"`
	NewOwner string `protobuf:"bytes,3,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
}

func (m *MsgChangeOrgOwnerResponse) Reset()         { *m = MsgChangeOrgOwnerResponse{} }
func (m *MsgChangeOrgOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeOrgOwnerResponse) ProtoMessage()    {}
func (*MsgChangeOrgOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{41}
}
func (m *MsgChangeOrgOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeOrgOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeOrgOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeOrgOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeOrgOwnerResponse.Merge(m, src)
}
func (m *MsgChangeOrgOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeOrgOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeOrgOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeOrgOwnerResponse proto.InternalMessageInfo

func (m *MsgChangeOrgOwnerResponse) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *MsgChangeOrgOwnerResponse) GetOldOwner() string {
	if m != nil {
		return m.OldOwner
	}
	return ""
}

func (m *MsgChangeOrgOwnerResponse) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgSetUriRetrievalMethod struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaCode string `protobuf:"bytes,2,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewMethod  int32  `protobuf:"varint,3,opt,name=newMethod,proto3" json:"newMethod,omitempty"`
}

func (m *MsgSetUriRetrievalMethod) Reset()         { *m = MsgSetUriRetrievalMethod{} }
func (m *MsgSetUriRetrievalMethod) String() string { return proto.CompactTextString(m) }
func (*MsgSetUriRetrievalMethod) ProtoMessage()    {}
func (*MsgSetUriRetrievalMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{42}
}
func (m *MsgSetUriRetrievalMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetUriRetrievalMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetUriRetrievalMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetUriRetrievalMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetUriRetrievalMethod.Merge(m, src)
}
func (m *MsgSetUriRetrievalMethod) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetUriRetrievalMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetUriRetrievalMethod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetUriRetrievalMethod proto.InternalMessageInfo

func (m *MsgSetUriRetrievalMethod) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetUriRetrievalMethod) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetUriRetrievalMethod) GetNewMethod() int32 {
	if m != nil {
		return m.NewMethod
	}
	return 0
}

type MsgSetUriRetrievalMethodResponse struct {
	SchemaCode string `protobuf:"bytes,1,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewMethod  string `protobuf:"bytes,2,opt,name=newMethod,proto3" json:"newMethod,omitempty"`
}

func (m *MsgSetUriRetrievalMethodResponse) Reset()         { *m = MsgSetUriRetrievalMethodResponse{} }
func (m *MsgSetUriRetrievalMethodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetUriRetrievalMethodResponse) ProtoMessage()    {}
func (*MsgSetUriRetrievalMethodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{43}
}
func (m *MsgSetUriRetrievalMethodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetUriRetrievalMethodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetUriRetrievalMethodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetUriRetrievalMethodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetUriRetrievalMethodResponse.Merge(m, src)
}
func (m *MsgSetUriRetrievalMethodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetUriRetrievalMethodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetUriRetrievalMethodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetUriRetrievalMethodResponse proto.InternalMessageInfo

func (m *MsgSetUriRetrievalMethodResponse) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetUriRetrievalMethodResponse) GetNewMethod() string {
	if m != nil {
		return m.NewMethod
	}
	return ""
}

type MsgSetOriginChain struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaCode     string `protobuf:"bytes,2,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewOriginChain string `protobuf:"bytes,3,opt,name=newOriginChain,proto3" json:"newOriginChain,omitempty"`
}

func (m *MsgSetOriginChain) Reset()         { *m = MsgSetOriginChain{} }
func (m *MsgSetOriginChain) String() string { return proto.CompactTextString(m) }
func (*MsgSetOriginChain) ProtoMessage()    {}
func (*MsgSetOriginChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{44}
}
func (m *MsgSetOriginChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOriginChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOriginChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOriginChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOriginChain.Merge(m, src)
}
func (m *MsgSetOriginChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOriginChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOriginChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOriginChain proto.InternalMessageInfo

func (m *MsgSetOriginChain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetOriginChain) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetOriginChain) GetNewOriginChain() string {
	if m != nil {
		return m.NewOriginChain
	}
	return ""
}

type MsgSetOriginChainResponse struct {
	SchemaCode     string `protobuf:"bytes,1,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewOriginChain string `protobuf:"bytes,2,opt,name=newOriginChain,proto3" json:"newOriginChain,omitempty"`
}

func (m *MsgSetOriginChainResponse) Reset()         { *m = MsgSetOriginChainResponse{} }
func (m *MsgSetOriginChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOriginChainResponse) ProtoMessage()    {}
func (*MsgSetOriginChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{45}
}
func (m *MsgSetOriginChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOriginChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOriginChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOriginChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOriginChainResponse.Merge(m, src)
}
func (m *MsgSetOriginChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOriginChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOriginChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOriginChainResponse proto.InternalMessageInfo

func (m *MsgSetOriginChainResponse) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetOriginChainResponse) GetNewOriginChain() string {
	if m != nil {
		return m.NewOriginChain
	}
	return ""
}

type MsgSetOriginContract struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaCode         string `protobuf:"bytes,2,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewContractAddress string `protobuf:"bytes,3,opt,name=newContractAddress,proto3" json:"newContractAddress,omitempty"`
}

func (m *MsgSetOriginContract) Reset()         { *m = MsgSetOriginContract{} }
func (m *MsgSetOriginContract) String() string { return proto.CompactTextString(m) }
func (*MsgSetOriginContract) ProtoMessage()    {}
func (*MsgSetOriginContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{46}
}
func (m *MsgSetOriginContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOriginContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOriginContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOriginContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOriginContract.Merge(m, src)
}
func (m *MsgSetOriginContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOriginContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOriginContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOriginContract proto.InternalMessageInfo

func (m *MsgSetOriginContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetOriginContract) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetOriginContract) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

type MsgSetOriginContractResponse struct {
	SchemaCode         string `protobuf:"bytes,1,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=newContractAddress,proto3" json:"newContractAddress,omitempty"`
}

func (m *MsgSetOriginContractResponse) Reset()         { *m = MsgSetOriginContractResponse{} }
func (m *MsgSetOriginContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOriginContractResponse) ProtoMessage()    {}
func (*MsgSetOriginContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{47}
}
func (m *MsgSetOriginContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOriginContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOriginContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOriginContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOriginContractResponse.Merge(m, src)
}
func (m *MsgSetOriginContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOriginContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOriginContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOriginContractResponse proto.InternalMessageInfo

func (m *MsgSetOriginContractResponse) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetOriginContractResponse) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

type MsgSetAttributeOveriding struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaCode       string `protobuf:"bytes,2,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewOveridingType int32  `protobuf:"varint,3,opt,name=newOveridingType,proto3" json:"newOveridingType,omitempty"`
}

func (m *MsgSetAttributeOveriding) Reset()         { *m = MsgSetAttributeOveriding{} }
func (m *MsgSetAttributeOveriding) String() string { return proto.CompactTextString(m) }
func (*MsgSetAttributeOveriding) ProtoMessage()    {}
func (*MsgSetAttributeOveriding) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{48}
}
func (m *MsgSetAttributeOveriding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAttributeOveriding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAttributeOveriding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAttributeOveriding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAttributeOveriding.Merge(m, src)
}
func (m *MsgSetAttributeOveriding) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAttributeOveriding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAttributeOveriding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAttributeOveriding proto.InternalMessageInfo

func (m *MsgSetAttributeOveriding) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetAttributeOveriding) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetAttributeOveriding) GetNewOveridingType() int32 {
	if m != nil {
		return m.NewOveridingType
	}
	return 0
}

type MsgSetAttributeOveridingResponse struct {
	SchemaCode   string `protobuf:"bytes,1,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewOveriding string `protobuf:"bytes,2,opt,name=newOveriding,proto3" json:"newOveriding,omitempty"`
}

func (m *MsgSetAttributeOveridingResponse) Reset()         { *m = MsgSetAttributeOveridingResponse{} }
func (m *MsgSetAttributeOveridingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetAttributeOveridingResponse) ProtoMessage()    {}
func (*MsgSetAttributeOveridingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{49}
}
func (m *MsgSetAttributeOveridingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAttributeOveridingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAttributeOveridingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAttributeOveridingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAttributeOveridingResponse.Merge(m, src)
}
func (m *MsgSetAttributeOveridingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAttributeOveridingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAttributeOveridingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAttributeOveridingResponse proto.InternalMessageInfo

func (m *MsgSetAttributeOveridingResponse) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetAttributeOveridingResponse) GetNewOveriding() string {
	if m != nil {
		return m.NewOveriding
	}
	return ""
}

type MsgSetMetadataFormat struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaCode string `protobuf:"bytes,2,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewFormat  string `protobuf:"bytes,3,opt,name=newFormat,proto3" json:"newFormat,omitempty"`
}

func (m *MsgSetMetadataFormat) Reset()         { *m = MsgSetMetadataFormat{} }
func (m *MsgSetMetadataFormat) String() string { return proto.CompactTextString(m) }
func (*MsgSetMetadataFormat) ProtoMessage()    {}
func (*MsgSetMetadataFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{50}
}
func (m *MsgSetMetadataFormat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMetadataFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMetadataFormat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMetadataFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMetadataFormat.Merge(m, src)
}
func (m *MsgSetMetadataFormat) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMetadataFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMetadataFormat.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMetadataFormat proto.InternalMessageInfo

func (m *MsgSetMetadataFormat) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetMetadataFormat) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetMetadataFormat) GetNewFormat() string {
	if m != nil {
		return m.NewFormat
	}
	return ""
}

type MsgSetMetadataFormatResponse struct {
	SchemaCode string `protobuf:"bytes,1,opt,name=schemaCode,proto3" json:"schemaCode,omitempty"`
	NewFormat  string `protobuf:"bytes,2,opt,name=newFormat,proto3" json:"newFormat,omitempty"`
}

func (m *MsgSetMetadataFormatResponse) Reset()         { *m = MsgSetMetadataFormatResponse{} }
func (m *MsgSetMetadataFormatResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMetadataFormatResponse) ProtoMessage()    {}
func (*MsgSetMetadataFormatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{51}
}
func (m *MsgSetMetadataFormatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMetadataFormatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMetadataFormatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMetadataFormatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMetadataFormatResponse.Merge(m, src)
}
func (m *MsgSetMetadataFormatResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMetadataFormatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMetadataFormatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMetadataFormatResponse proto.InternalMessageInfo

func (m *MsgSetMetadataFormatResponse) GetSchemaCode() string {
	if m != nil {
		return m.SchemaCode
	}
	return ""
}

func (m *MsgSetMetadataFormatResponse) GetNewFormat() string {
	if m != nil {
		return m.NewFormat
	}
	return ""
}

type MsgCreateActionExecutor struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode   string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,3,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgCreateActionExecutor) Reset()         { *m = MsgCreateActionExecutor{} }
func (m *MsgCreateActionExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgCreateActionExecutor) ProtoMessage()    {}
func (*MsgCreateActionExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{52}
}
func (m *MsgCreateActionExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateActionExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateActionExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateActionExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateActionExecutor.Merge(m, src)
}
func (m *MsgCreateActionExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateActionExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateActionExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateActionExecutor proto.InternalMessageInfo

func (m *MsgCreateActionExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateActionExecutor) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateActionExecutor) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgCreateActionExecutorResponse struct {
	NftSchemaCode   string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,2,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgCreateActionExecutorResponse) Reset()         { *m = MsgCreateActionExecutorResponse{} }
func (m *MsgCreateActionExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateActionExecutorResponse) ProtoMessage()    {}
func (*MsgCreateActionExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{53}
}
func (m *MsgCreateActionExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateActionExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateActionExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateActionExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateActionExecutorResponse.Merge(m, src)
}
func (m *MsgCreateActionExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateActionExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateActionExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateActionExecutorResponse proto.InternalMessageInfo

func (m *MsgCreateActionExecutorResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateActionExecutorResponse) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgUpdateActionExecutor struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode   string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,3,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgUpdateActionExecutor) Reset()         { *m = MsgUpdateActionExecutor{} }
func (m *MsgUpdateActionExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateActionExecutor) ProtoMessage()    {}
func (*MsgUpdateActionExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{54}
}
func (m *MsgUpdateActionExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateActionExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateActionExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateActionExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateActionExecutor.Merge(m, src)
}
func (m *MsgUpdateActionExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateActionExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateActionExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateActionExecutor proto.InternalMessageInfo

func (m *MsgUpdateActionExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateActionExecutor) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgUpdateActionExecutor) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgUpdateActionExecutorResponse struct {
	NftSchemaCode   string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,2,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgUpdateActionExecutorResponse) Reset()         { *m = MsgUpdateActionExecutorResponse{} }
func (m *MsgUpdateActionExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateActionExecutorResponse) ProtoMessage()    {}
func (*MsgUpdateActionExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{55}
}
func (m *MsgUpdateActionExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateActionExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateActionExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateActionExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateActionExecutorResponse.Merge(m, src)
}
func (m *MsgUpdateActionExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateActionExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateActionExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateActionExecutorResponse proto.InternalMessageInfo

func (m *MsgUpdateActionExecutorResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgUpdateActionExecutorResponse) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgDeleteActionExecutor struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode   string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,3,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgDeleteActionExecutor) Reset()         { *m = MsgDeleteActionExecutor{} }
func (m *MsgDeleteActionExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteActionExecutor) ProtoMessage()    {}
func (*MsgDeleteActionExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{56}
}
func (m *MsgDeleteActionExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteActionExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteActionExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteActionExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteActionExecutor.Merge(m, src)
}
func (m *MsgDeleteActionExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteActionExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteActionExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteActionExecutor proto.InternalMessageInfo

func (m *MsgDeleteActionExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteActionExecutor) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgDeleteActionExecutor) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgDeleteActionExecutorResponse struct {
	NftSchemaCode   string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	ExecutorAddress string `protobuf:"bytes,2,opt,name=executorAddress,proto3" json:"executorAddress,omitempty"`
}

func (m *MsgDeleteActionExecutorResponse) Reset()         { *m = MsgDeleteActionExecutorResponse{} }
func (m *MsgDeleteActionExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteActionExecutorResponse) ProtoMessage()    {}
func (*MsgDeleteActionExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{57}
}
func (m *MsgDeleteActionExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteActionExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteActionExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteActionExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteActionExecutorResponse.Merge(m, src)
}
func (m *MsgDeleteActionExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteActionExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteActionExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteActionExecutorResponse proto.InternalMessageInfo

func (m *MsgDeleteActionExecutorResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgDeleteActionExecutorResponse) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

type MsgCreateSchemaAttribute struct {
	Creator                     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode               string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name                        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Base64NewAttriuteDefenition string `protobuf:"bytes,4,opt,name=Base64NewAttriuteDefenition,proto3" json:"Base64NewAttriuteDefenition,omitempty"`
}

func (m *MsgCreateSchemaAttribute) Reset()         { *m = MsgCreateSchemaAttribute{} }
func (m *MsgCreateSchemaAttribute) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSchemaAttribute) ProtoMessage()    {}
func (*MsgCreateSchemaAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{58}
}
func (m *MsgCreateSchemaAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSchemaAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSchemaAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSchemaAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSchemaAttribute.Merge(m, src)
}
func (m *MsgCreateSchemaAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSchemaAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSchemaAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSchemaAttribute proto.InternalMessageInfo

func (m *MsgCreateSchemaAttribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSchemaAttribute) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateSchemaAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateSchemaAttribute) GetBase64NewAttriuteDefenition() string {
	if m != nil {
		return m.Base64NewAttriuteDefenition
	}
	return ""
}

type MsgCreateSchemaAttributeResponse struct {
	NftSchemaCode string           `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NewAttribute  *SchemaAttribute `protobuf:"bytes,3,opt,name=new_attribute,json=newAttribute,proto3" json:"new_attribute,omitempty"`
}

func (m *MsgCreateSchemaAttributeResponse) Reset()         { *m = MsgCreateSchemaAttributeResponse{} }
func (m *MsgCreateSchemaAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSchemaAttributeResponse) ProtoMessage()    {}
func (*MsgCreateSchemaAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{59}
}
func (m *MsgCreateSchemaAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSchemaAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSchemaAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSchemaAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSchemaAttributeResponse.Merge(m, src)
}
func (m *MsgCreateSchemaAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSchemaAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSchemaAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSchemaAttributeResponse proto.InternalMessageInfo

func (m *MsgCreateSchemaAttributeResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgCreateSchemaAttributeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateSchemaAttributeResponse) GetNewAttribute() *SchemaAttribute {
	if m != nil {
		return m.NewAttribute
	}
	return nil
}

type MsgUpdateSchemaAttribute struct {
	Creator                     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode               string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name                        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Base64NewAttriuteDefenition string `protobuf:"bytes,4,opt,name=Base64NewAttriuteDefenition,proto3" json:"Base64NewAttriuteDefenition,omitempty"`
}

func (m *MsgUpdateSchemaAttribute) Reset()         { *m = MsgUpdateSchemaAttribute{} }
func (m *MsgUpdateSchemaAttribute) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSchemaAttribute) ProtoMessage()    {}
func (*MsgUpdateSchemaAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{60}
}
func (m *MsgUpdateSchemaAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSchemaAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSchemaAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSchemaAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSchemaAttribute.Merge(m, src)
}
func (m *MsgUpdateSchemaAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSchemaAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSchemaAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSchemaAttribute proto.InternalMessageInfo

func (m *MsgUpdateSchemaAttribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSchemaAttribute) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgUpdateSchemaAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateSchemaAttribute) GetBase64NewAttriuteDefenition() string {
	if m != nil {
		return m.Base64NewAttriuteDefenition
	}
	return ""
}

type MsgUpdateSchemaAttributeResponse struct {
	NftSchemaCode string           `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NewAttribute  *SchemaAttribute `protobuf:"bytes,3,opt,name=new_attribute,json=newAttribute,proto3" json:"new_attribute,omitempty"`
}

func (m *MsgUpdateSchemaAttributeResponse) Reset()         { *m = MsgUpdateSchemaAttributeResponse{} }
func (m *MsgUpdateSchemaAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSchemaAttributeResponse) ProtoMessage()    {}
func (*MsgUpdateSchemaAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{61}
}
func (m *MsgUpdateSchemaAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSchemaAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSchemaAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSchemaAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSchemaAttributeResponse.Merge(m, src)
}
func (m *MsgUpdateSchemaAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSchemaAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSchemaAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSchemaAttributeResponse proto.InternalMessageInfo

func (m *MsgUpdateSchemaAttributeResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgUpdateSchemaAttributeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateSchemaAttributeResponse) GetNewAttribute() *SchemaAttribute {
	if m != nil {
		return m.NewAttribute
	}
	return nil
}

type MsgDeleteSchemaAttribute struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftSchemaCode string `protobuf:"bytes,2,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgDeleteSchemaAttribute) Reset()         { *m = MsgDeleteSchemaAttribute{} }
func (m *MsgDeleteSchemaAttribute) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSchemaAttribute) ProtoMessage()    {}
func (*MsgDeleteSchemaAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{62}
}
func (m *MsgDeleteSchemaAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSchemaAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSchemaAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSchemaAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSchemaAttribute.Merge(m, src)
}
func (m *MsgDeleteSchemaAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSchemaAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSchemaAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSchemaAttribute proto.InternalMessageInfo

func (m *MsgDeleteSchemaAttribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteSchemaAttribute) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgDeleteSchemaAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MsgDeleteSchemaAttributeResponse struct {
	NftSchemaCode string `protobuf:"bytes,1,opt,name=nftSchemaCode,proto3" json:"nftSchemaCode,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgDeleteSchemaAttributeResponse) Reset()         { *m = MsgDeleteSchemaAttributeResponse{} }
func (m *MsgDeleteSchemaAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSchemaAttributeResponse) ProtoMessage()    {}
func (*MsgDeleteSchemaAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e298b08d1e9780, []int{63}
}
func (m *MsgDeleteSchemaAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSchemaAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSchemaAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSchemaAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSchemaAttributeResponse.Merge(m, src)
}
func (m *MsgDeleteSchemaAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSchemaAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSchemaAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSchemaAttributeResponse proto.InternalMessageInfo

func (m *MsgDeleteSchemaAttributeResponse) GetNftSchemaCode() string {
	if m != nil {
		return m.NftSchemaCode
	}
	return ""
}

func (m *MsgDeleteSchemaAttributeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("thesixnetwork.sixnft.nftmngr.AttributeLocationV1", AttributeLocationV1_name, AttributeLocationV1_value)
	proto.RegisterEnum("thesixnetwork.sixnft.nftmngr.AttributeLocation", AttributeLocation_name, AttributeLocation_value)
	proto.RegisterEnum("thesixnetwork.sixnft.nftmngr.AuthorizeTo", AuthorizeTo_name, AuthorizeTo_value)
	proto.RegisterEnum("thesixnetwork.sixnft.nftmngr.FeeSubject", FeeSubject_name, FeeSubject_value)
	proto.RegisterType((*MsgCreateNFTSchema)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateNFTSchema")
	proto.RegisterType((*MsgCreateNFTSchemaResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateNFTSchemaResponse")
	proto.RegisterType((*MsgCreateMetadata)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateMetadata")
	proto.RegisterType((*MsgCreateMetadataResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateMetadataResponse")
	proto.RegisterType((*MsgCreateMultiMetadata)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateMultiMetadata")
	proto.RegisterType((*MsgCreateMultiMetadataResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateMultiMetadataResponse")
	proto.RegisterType((*OpenseaAttribute)(nil), "thesixnetwork.sixnft.nftmngr.OpenseaAttribute")
	proto.RegisterType((*UpdatedOpenseaAttributes)(nil), "thesixnetwork.sixnft.nftmngr.UpdatedOpenseaAttributes")
	proto.RegisterType((*UpdatedOriginData)(nil), "thesixnetwork.sixnft.nftmngr.UpdatedOriginData")
	proto.RegisterType((*ActionParameter)(nil), "thesixnetwork.sixnft.nftmngr.ActionParameter")
	proto.RegisterType((*MsgPerformActionByAdmin)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformActionByAdmin")
	proto.RegisterType((*MsgPerformActionByAdminResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformActionByAdminResponse")
	proto.RegisterType((*MsgPerformMultiTokenAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenAction")
	proto.RegisterType((*MsgPerformMultiTokenActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenActionResponse")
	proto.RegisterType((*MsgPerformMultiTokenOneAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenOneAction")
	proto.RegisterType((*MsgPerformMultiTokenOneActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenOneActionResponse")
	proto.RegisterType((*MsgPerformMultiTokenMultiAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenMultiAction")
	proto.RegisterType((*MsgPerformMultiTokenMultiActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformMultiTokenMultiActionResponse")
	proto.RegisterType((*MsgPerformOneTokenMultiAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformOneTokenMultiAction")
	proto.RegisterType((*MsgPerformOneTokenMultiActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgPerformOneTokenMultiActionResponse")
	proto.RegisterType((*MsgAddAttribute)(nil), "thesixnetwork.sixnft.nftmngr.MsgAddAttribute")
	proto.RegisterType((*MsgAddAttributeResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgAddAttributeResponse")
	proto.RegisterType((*MsgAddAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgAddAction")
	proto.RegisterType((*MsgAddActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgAddActionResponse")
	proto.RegisterType((*MsgSetNFTAttribute)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetNFTAttribute")
	proto.RegisterType((*MsgSetNFTAttributeResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetNFTAttributeResponse")
	proto.RegisterType((*MsgSetBaseUri)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetBaseUri")
	proto.RegisterType((*MsgSetBaseUriResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetBaseUriResponse")
	proto.RegisterType((*MsgToggleAction)(nil), "thesixnetwork.sixnft.nftmngr.MsgToggleAction")
	proto.RegisterType((*MsgToggleActionResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgToggleActionResponse")
	proto.RegisterType((*MsgChangeSchemaOwner)(nil), "thesixnetwork.sixnft.nftmngr.MsgChangeSchemaOwner")
	proto.RegisterType((*MsgChangeSchemaOwnerResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgChangeSchemaOwnerResponse")
	proto.RegisterType((*MsgResyncAttributesResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgResyncAttributesResponse")
	proto.RegisterType((*MsgShowAttributes)(nil), "thesixnetwork.sixnft.nftmngr.MsgShowAttributes")
	proto.RegisterType((*MsgShowAttributesResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgShowAttributesResponse")
	proto.RegisterType((*MsgResyncAttributes)(nil), "thesixnetwork.sixnft.nftmngr.MsgResyncAttributes")
	proto.RegisterType((*MsgSetFeeConfig)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetFeeConfig")
	proto.RegisterType((*MsgSetFeeConfigResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetFeeConfigResponse")
	proto.RegisterType((*MsgSetMintauth)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetMintauth")
	proto.RegisterType((*MsgSetMintauthResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetMintauthResponse")
	proto.RegisterType((*MsgChangeOrgOwner)(nil), "thesixnetwork.sixnft.nftmngr.MsgChangeOrgOwner")
	proto.RegisterType((*MsgChangeOrgOwnerResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgChangeOrgOwnerResponse")
	proto.RegisterType((*MsgSetUriRetrievalMethod)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetUriRetrievalMethod")
	proto.RegisterType((*MsgSetUriRetrievalMethodResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetUriRetrievalMethodResponse")
	proto.RegisterType((*MsgSetOriginChain)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetOriginChain")
	proto.RegisterType((*MsgSetOriginChainResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetOriginChainResponse")
	proto.RegisterType((*MsgSetOriginContract)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetOriginContract")
	proto.RegisterType((*MsgSetOriginContractResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetOriginContractResponse")
	proto.RegisterType((*MsgSetAttributeOveriding)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetAttributeOveriding")
	proto.RegisterType((*MsgSetAttributeOveridingResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetAttributeOveridingResponse")
	proto.RegisterType((*MsgSetMetadataFormat)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetMetadataFormat")
	proto.RegisterType((*MsgSetMetadataFormatResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgSetMetadataFormatResponse")
	proto.RegisterType((*MsgCreateActionExecutor)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateActionExecutor")
	proto.RegisterType((*MsgCreateActionExecutorResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateActionExecutorResponse")
	proto.RegisterType((*MsgUpdateActionExecutor)(nil), "thesixnetwork.sixnft.nftmngr.MsgUpdateActionExecutor")
	proto.RegisterType((*MsgUpdateActionExecutorResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgUpdateActionExecutorResponse")
	proto.RegisterType((*MsgDeleteActionExecutor)(nil), "thesixnetwork.sixnft.nftmngr.MsgDeleteActionExecutor")
	proto.RegisterType((*MsgDeleteActionExecutorResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgDeleteActionExecutorResponse")
	proto.RegisterType((*MsgCreateSchemaAttribute)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateSchemaAttribute")
	proto.RegisterType((*MsgCreateSchemaAttributeResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgCreateSchemaAttributeResponse")
	proto.RegisterType((*MsgUpdateSchemaAttribute)(nil), "thesixnetwork.sixnft.nftmngr.MsgUpdateSchemaAttribute")
	proto.RegisterType((*MsgUpdateSchemaAttributeResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgUpdateSchemaAttributeResponse")
	proto.RegisterType((*MsgDeleteSchemaAttribute)(nil), "thesixnetwork.sixnft.nftmngr.MsgDeleteSchemaAttribute")
	proto.RegisterType((*MsgDeleteSchemaAttributeResponse)(nil), "thesixnetwork.sixnft.nftmngr.MsgDeleteSchemaAttributeResponse")
}

func init() { proto.RegisterFile("nftmngr/tx.proto", fileDescriptor_17e298b08d1e9780) }

var fileDescriptor_17e298b08d1e9780 = []byte{
	// 2324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xdf, 0x6f, 0x1b, 0xc7,
	0xf1, 0xd7, 0x91, 0xfe, 0x21, 0x8d, 0x2c, 0x89, 0x3a, 0x49, 0x36, 0x4d, 0xd9, 0xfc, 0xfa, 0xbb,
	0x6d, 0x5c, 0x55, 0xad, 0xc9, 0x44, 0xb1, 0xd5, 0xa4, 0xa9, 0x03, 0x53, 0xb2, 0x04, 0x1b, 0x36,
	0xa5, 0x80, 0xa2, 0xd3, 0x5f, 0x09, 0xe8, 0x13, 0xb9, 0x3c, 0x5d, 0x2c, 0xdd, 0xc9, 0x77, 0x4b,
	0xd3, 0x0a, 0x9a, 0xd6, 0x45, 0x9e, 0x8a, 0x16, 0x4d, 0x81, 0xa0, 0x40, 0xd1, 0xa2, 0x8f, 0x7d,
	0xef, 0x7f, 0x91, 0xf6, 0xa5, 0xc8, 0x63, 0x1f, 0x0b, 0xfb, 0x4f, 0x68, 0xd1, 0xe7, 0xe2, 0x76,
	0xf7, 0x8e, 0x7b, 0x77, 0xcb, 0xfb, 0x21, 0x5a, 0x71, 0xfb, 0xc6, 0xdb, 0xdb, 0x99, 0xf9, 0xcc,
	0x67, 0x67, 0x66, 0x77, 0x87, 0x07, 0x05, 0xb3, 0x4b, 0x0e, 0x4c, 0xdd, 0xae, 0x92, 0xa7, 0x95,
	0x43, 0xdb, 0x22, 0x96, 0x7a, 0x89, 0xec, 0x61, 0xc7, 0x78, 0x6a, 0x62, 0xd2, 0xb7, 0xec, 0x47,
	0x15, 0xf7, 0x67, 0x97, 0x54, 0xf8, 0xb4, 0xd2, 0x65, 0x6f, 0xbe, 0xd6, 0x26, 0x86, 0x65, 0xb6,
	0xf0, 0x53, 0xdc, 0xee, 0x11, 0xcb, 0x66, 0xc2, 0xa5, 0xb2, 0xf7, 0xda, 0x69, 0xef, 0xe1, 0x03,
	0xad, 0xa5, 0x11, 0x62, 0x1b, 0xbb, 0x3d, 0x82, 0xf9, 0xfb, 0x45, 0xef, 0xbd, 0x65, 0xb6, 0xda,
	0x7b, 0x9a, 0x61, 0xb6, 0x3a, 0x1a, 0xd1, 0xf8, 0x4b, 0xe4, 0xeb, 0xf6, 0xa4, 0x5a, 0x1d, 0xdc,
	0x35, 0x4c, 0xc3, 0xb5, 0xc4, 0xe7, 0xfc, 0xbf, 0x37, 0xc7, 0xec, 0x92, 0x81, 0xf6, 0xd6, 0x13,
	0x6d, 0xbf, 0xe7, 0xd9, 0xb8, 0xa8, 0x5b, 0x96, 0xbe, 0x8f, 0xab, 0xf4, 0x69, 0xb7, 0xd7, 0xad,
	0x6a, 0xe6, 0x11, 0x7b, 0x85, 0x7e, 0x00, 0x6a, 0xdd, 0xd1, 0xd7, 0x6d, 0xac, 0x11, 0xbc, 0xb5,
	0xd9, 0xdc, 0xa1, 0x20, 0xd5, 0x22, 0x9c, 0x6d, 0xbb, 0x43, 0x96, 0x5d, 0x54, 0xae, 0x28, 0x4b,
	0x13, 0x0d, 0xef, 0x51, 0x5d, 0x82, 0x19, 0xb3, 0x4b, 0xd8, 0xb4, 0x35, 0xcd, 0xc1, 0xab, 0xd7,
	0x8b, 0x39, 0x3a, 0x23, 0x3c, 0x8c, 0x5e, 0x87, 0x52, 0x54, 0x73, 0x03, 0x3b, 0x87, 0x96, 0xe9,
	0x60, 0x55, 0x85, 0x53, 0x6d, 0xab, 0x83, 0xb9, 0x7a, 0xfa, 0x1b, 0x7d, 0xae, 0xc0, 0xac, 0x2f,
	0x52, 0xc7, 0x44, 0x73, 0x99, 0x88, 0xc1, 0xf2, 0x75, 0x98, 0xf2, 0x8d, 0xae, 0xbb, 0xca, 0x18,
	0x92, 0xe0, 0xa0, 0x2b, 0x4f, 0xac, 0x47, 0xd8, 0xbc, 0xdb, 0x29, 0xe6, 0x99, 0x3c, 0x7f, 0x74,
	0xe5, 0x77, 0x29, 0xd6, 0xad, 0xcd, 0xe6, 0x6d, 0x8d, 0x68, 0xc5, 0x53, 0x4c, 0x3e, 0x30, 0x88,
	0x7e, 0x0c, 0x17, 0x23, 0xa0, 0x7c, 0x37, 0x22, 0x10, 0x94, 0x04, 0x08, 0xb9, 0x00, 0x04, 0xf4,
	0x3b, 0x05, 0xce, 0x0f, 0xb4, 0xf7, 0xf6, 0x89, 0x71, 0x32, 0x7e, 0xe7, 0xb3, 0xfb, 0xfd, 0x10,
	0xca, 0x72, 0x64, 0xa3, 0x38, 0x2f, 0xe2, 0x40, 0x1f, 0x42, 0x61, 0xfb, 0x10, 0x9b, 0x0e, 0xd6,
	0x6a, 0x5e, 0xd8, 0xaa, 0x97, 0x01, 0x88, 0xad, 0x19, 0xa4, 0x45, 0x8e, 0x0e, 0x3d, 0x85, 0x13,
	0x74, 0xa4, 0x79, 0x74, 0x88, 0xd5, 0x65, 0x38, 0x4d, 0x03, 0x9b, 0xba, 0x3c, 0xb9, 0x32, 0x5f,
	0x61, 0x91, 0x5d, 0xf1, 0x22, 0xbb, 0x52, 0x33, 0x8f, 0x1a, 0x6c, 0x0a, 0xfa, 0x08, 0x8a, 0x0f,
	0x0e, 0x3b, 0x1a, 0xc1, 0x9d, 0xb0, 0x15, 0x47, 0xdd, 0x02, 0xf0, 0x53, 0xc5, 0x29, 0x2a, 0x57,
	0xf2, 0x4b, 0x93, 0x2b, 0x95, 0x4a, 0x5c, 0x9e, 0x57, 0xc2, 0x4a, 0x1a, 0x82, 0x06, 0xf4, 0x53,
	0x98, 0xf5, 0x6c, 0xd9, 0x86, 0x6e, 0x98, 0x2e, 0x83, 0x6a, 0x03, 0xce, 0x5a, 0x4c, 0x88, 0x3a,
	0x32, 0xb9, 0xb2, 0x1a, 0x6f, 0x61, 0x18, 0xda, 0x3b, 0x63, 0x0d, 0x4f, 0xd1, 0xda, 0x02, 0xcc,
	0xf5, 0xd8, 0xb4, 0x96, 0x45, 0x2d, 0xd1, 0x72, 0x81, 0xde, 0x81, 0x99, 0x1a, 0x2d, 0x3f, 0xef,
	0x69, 0xb6, 0x76, 0x80, 0x09, 0xb6, 0xdd, 0x0c, 0x33, 0xb5, 0x03, 0x3f, 0xc3, 0xdc, 0xdf, 0xea,
	0xbc, 0x48, 0xdf, 0x84, 0x47, 0xd4, 0x3f, 0x15, 0xb8, 0x50, 0x77, 0xf4, 0xf7, 0xb0, 0xdd, 0xb5,
	0xec, 0x03, 0xa6, 0x67, 0xed, 0xa8, 0xd6, 0x39, 0x30, 0xcc, 0x98, 0x28, 0xbc, 0x4a, 0x2b, 0x41,
	0x8b, 0x97, 0xb5, 0xf6, 0x31, 0xf2, 0xef, 0x3c, 0x9c, 0x61, 0x35, 0x93, 0x07, 0x20, 0x7f, 0x52,
	0x17, 0xe0, 0x8c, 0x8d, 0xbb, 0x2d, 0xa3, 0x53, 0x3c, 0xcd, 0x60, 0xda, 0xb8, 0x7b, 0xb7, 0xa3,
	0xd6, 0x01, 0x0e, 0x3d, 0xef, 0x9c, 0xe2, 0x19, 0xba, 0x66, 0xd7, 0xe2, 0x19, 0x0d, 0x71, 0xd2,
	0x10, 0x14, 0xa0, 0x0e, 0xfc, 0xdf, 0x10, 0xa7, 0xfd, 0x00, 0x97, 0xb8, 0x28, 0x0d, 0xf1, 0x8b,
	0x30, 0x4e, 0x7d, 0x72, 0x21, 0x87, 0x12, 0xfc, 0x0b, 0x85, 0x96, 0x41, 0x6e, 0x86, 0xe6, 0x51,
	0xd3, 0x7d, 0xc5, 0x0c, 0xbe, 0x6c, 0x7a, 0xf3, 0xc3, 0xe8, 0xcd, 0x27, 0xd3, 0x5b, 0x0e, 0xd1,
	0xeb, 0xbe, 0x12, 0xf9, 0xfa, 0x09, 0xa0, 0xe1, 0x8e, 0xbc, 0xac, 0x9a, 0x20, 0x80, 0xce, 0x8b,
	0xa0, 0xd1, 0xbf, 0x15, 0xb8, 0x2c, 0x33, 0xbf, 0x6d, 0xe2, 0x44, 0x2a, 0x47, 0xad, 0x97, 0xc3,
	0xe2, 0x74, 0x1e, 0x18, 0x75, 0x27, 0x1a, 0xa6, 0x3a, 0xbc, 0x16, 0xeb, 0xf7, 0x4b, 0xab, 0xc6,
	0x7f, 0x55, 0xc4, 0x84, 0x18, 0x58, 0xa2, 0xbf, 0xbe, 0x52, 0x8e, 0xf3, 0x89, 0x1c, 0x97, 0x23,
	0x1c, 0x07, 0x63, 0xf5, 0xe7, 0x0a, 0x7c, 0x23, 0xc1, 0x97, 0x13, 0x8f, 0xd8, 0x2f, 0x02, 0x11,
	0xbb, 0x6d, 0xe2, 0x93, 0x65, 0x53, 0x39, 0x39, 0x36, 0x7f, 0x26, 0x86, 0xa0, 0xc4, 0x91, 0x97,
	0x75, 0x1a, 0x1a, 0x4a, 0xe5, 0xdf, 0x14, 0x98, 0xa9, 0x3b, 0x7a, 0xad, 0xd3, 0x19, 0x1c, 0x14,
	0x86, 0x93, 0xe7, 0x1d, 0x2d, 0x73, 0x83, 0xa3, 0xa5, 0x7a, 0x0f, 0xc6, 0xf7, 0xad, 0xb6, 0xc6,
	0x75, 0x2b, 0x4b, 0xd3, 0x2b, 0xd5, 0x84, 0x94, 0xf4, 0x0c, 0xdd, 0xe7, 0x62, 0x0d, 0x5f, 0x81,
	0x7a, 0x0b, 0x16, 0xf9, 0x51, 0x09, 0xf7, 0xe9, 0xbc, 0x1e, 0xc1, 0xb7, 0x71, 0x17, 0xb3, 0x63,
	0x39, 0x2f, 0x12, 0x71, 0x53, 0xd0, 0xaf, 0xd9, 0x8e, 0x2b, 0x3a, 0x14, 0x77, 0x32, 0xf6, 0xf7,
	0xf2, 0x9c, 0xb0, 0x97, 0xdf, 0x83, 0x49, 0xcb, 0xa4, 0x37, 0x06, 0x7a, 0x86, 0xcb, 0xd3, 0x13,
	0xc6, 0x37, 0x13, 0xce, 0x30, 0xe6, 0xba, 0x27, 0xd0, 0x10, 0xa5, 0x51, 0x17, 0xce, 0x71, 0x3c,
	0x49, 0xa1, 0x29, 0x63, 0x77, 0x09, 0x66, 0x06, 0xde, 0xb6, 0x7d, 0x92, 0x27, 0x1a, 0xe1, 0x61,
	0xf4, 0x4b, 0x05, 0xe6, 0x45, 0x43, 0xaf, 0xd6, 0xeb, 0xcf, 0x15, 0x7a, 0xfb, 0xd9, 0xc1, 0x64,
	0x6b, 0xb3, 0x99, 0x26, 0xb4, 0xd2, 0x6e, 0xca, 0xef, 0x40, 0x89, 0x79, 0xde, 0x92, 0x5c, 0xca,
	0x38, 0x37, 0x17, 0x38, 0x37, 0x5d, 0xe2, 0x5b, 0x7e, 0x9f, 0x1e, 0xc7, 0xfe, 0xc0, 0x8e, 0x0c,
	0x21, 0x54, 0x99, 0x0f, 0x25, 0xaf, 0xc1, 0xf4, 0xc0, 0xb0, 0xc0, 0xe3, 0x94, 0x3f, 0xba, 0xe5,
	0x12, 0x5a, 0x81, 0xb9, 0xe1, 0x18, 0x67, 0xcd, 0x08, 0xba, 0x0f, 0x61, 0x8a, 0x81, 0x73, 0xaf,
	0x79, 0x0f, 0x6c, 0x23, 0x63, 0xa8, 0x94, 0x01, 0x4c, 0xdc, 0xe7, 0xb2, 0xdc, 0x8a, 0x30, 0x82,
	0x6e, 0xc2, 0x42, 0x40, 0x7d, 0x6c, 0x80, 0x14, 0x20, 0xdf, 0xb3, 0x0d, 0xae, 0xdf, 0xfd, 0x89,
	0x1e, 0xd3, 0x42, 0xd1, 0xb4, 0x74, 0x7d, 0x1f, 0x1f, 0x2b, 0x94, 0xc5, 0x12, 0x24, 0xee, 0xf5,
	0x45, 0x38, 0xdb, 0x31, 0x1c, 0x6d, 0x77, 0x1f, 0xd3, 0xfc, 0x1e, 0x6f, 0x78, 0x8f, 0xe8, 0xf7,
	0x2c, 0x97, 0x45, 0x9b, 0x99, 0xa3, 0xfa, 0xfb, 0x30, 0x2b, 0xc4, 0xa5, 0x90, 0x42, 0x99, 0x62,
	0x3b, 0xaa, 0x03, 0xd9, 0x34, 0xdd, 0xd6, 0xf7, 0x34, 0x53, 0xc7, 0x2c, 0x36, 0xb6, 0xfb, 0x26,
	0xb6, 0x47, 0xde, 0x7a, 0x4a, 0x30, 0x6e, 0xe2, 0x3e, 0xd5, 0xc5, 0x89, 0xf2, 0x9f, 0xd1, 0x43,
	0xb8, 0x24, 0xb3, 0x99, 0x71, 0x97, 0x10, 0x2d, 0xe4, 0x42, 0x16, 0xd6, 0x61, 0xb1, 0xee, 0xe8,
	0x0d, 0xec, 0x1c, 0x99, 0xed, 0xc1, 0x35, 0x29, 0x9b, 0x01, 0xf4, 0x19, 0xeb, 0x36, 0xec, 0xec,
	0x59, 0x7d, 0xe1, 0x62, 0x38, 0x2a, 0x31, 0x2a, 0x9c, 0x72, 0xf6, 0xac, 0x3e, 0x25, 0x65, 0xbc,
	0x41, 0x7f, 0xab, 0x57, 0x85, 0x4c, 0x74, 0x73, 0xce, 0xe1, 0xbb, 0x72, 0x68, 0x14, 0xbd, 0x4d,
	0x3b, 0x0d, 0x41, 0x40, 0xbe, 0x53, 0x97, 0x60, 0xc2, 0xb7, 0xe4, 0xdd, 0x8b, 0xfd, 0x01, 0x64,
	0xc1, 0x9c, 0x84, 0x91, 0x93, 0x3b, 0x61, 0xa0, 0x3f, 0xb1, 0x2d, 0x79, 0x07, 0x93, 0x4d, 0x8c,
	0xd7, 0x2d, 0xb3, 0x6b, 0xe8, 0x31, 0xd6, 0x2a, 0xa0, 0x9a, 0xb8, 0xef, 0xcf, 0x0c, 0x34, 0x8e,
	0x24, 0x6f, 0xd4, 0x3b, 0x00, 0x5d, 0x8c, 0x77, 0x7a, 0xbb, 0x1f, 0xe1, 0x36, 0xe1, 0x1b, 0xf6,
	0x52, 0x7c, 0x22, 0x6c, 0xfa, 0xf3, 0x1b, 0x82, 0x2c, 0xba, 0x48, 0x93, 0x53, 0x84, 0xe9, 0x31,
	0x8a, 0xfe, 0xa8, 0xc0, 0x34, 0x7b, 0x57, 0x37, 0x4c, 0xa2, 0xf5, 0xc8, 0xde, 0xc8, 0x7c, 0xdd,
	0x83, 0x49, 0x57, 0x8f, 0x65, 0x1b, 0x1f, 0xe3, 0xa6, 0xc5, 0x81, 0x27, 0x64, 0x70, 0x6d, 0x20,
	0xd0, 0x10, 0xa5, 0xd1, 0xbb, 0xb4, 0x35, 0x24, 0xc0, 0xcb, 0x18, 0xe0, 0x3a, 0xeb, 0xa6, 0xd1,
	0x3c, 0xdc, 0xb6, 0xf5, 0xa4, 0xc4, 0x2f, 0xc2, 0x59, 0xcb, 0xd6, 0xb7, 0x06, 0xa5, 0xc9, 0x7b,
	0x74, 0x6b, 0x36, 0xb1, 0xb6, 0x82, 0xe9, 0x2e, 0x8c, 0xa0, 0x03, 0xd6, 0x21, 0x0b, 0x18, 0xf2,
	0xb1, 0x0a, 0x6a, 0x95, 0xa0, 0xda, 0x12, 0x8c, 0x5b, 0xfb, 0x9d, 0x40, 0x86, 0x7b, 0xcf, 0xb1,
	0xf5, 0xc5, 0x86, 0x22, 0xe3, 0x85, 0x6e, 0x0f, 0xc4, 0x36, 0xf0, 0x13, 0x6d, 0xbf, 0x8e, 0xc9,
	0x9e, 0xd5, 0x89, 0x71, 0xaf, 0x0c, 0xe0, 0x84, 0x57, 0x4f, 0x18, 0xa1, 0xf9, 0x85, 0xfb, 0x4c,
	0x0d, 0x35, 0x79, 0xba, 0x31, 0x18, 0x40, 0x0f, 0xe1, 0xca, 0x30, 0x9b, 0xbe, 0xa7, 0x41, 0x0b,
	0x4a, 0xbc, 0x85, 0x1c, 0xcf, 0x60, 0xdf, 0x42, 0x8f, 0x55, 0x23, 0x4c, 0x58, 0x03, 0x89, 0x56,
	0xf5, 0x11, 0xdc, 0xb9, 0x0a, 0xd3, 0x2e, 0x61, 0x03, 0x5d, 0x9c, 0xc6, 0xd0, 0x28, 0x6a, 0xb3,
	0x9a, 0x13, 0x30, 0x9b, 0xda, 0xa3, 0xa8, 0x91, 0x9c, 0xd4, 0xc8, 0x33, 0x76, 0xea, 0x1b, 0x58,
	0xb1, 0x4c, 0x62, 0x6b, 0x6d, 0x32, 0x82, 0x7f, 0xac, 0xa2, 0x78, 0x8a, 0x6a, 0x9d, 0x8e, 0x8d,
	0x1d, 0x87, 0xfb, 0x28, 0x79, 0x83, 0x4c, 0xba, 0x29, 0x45, 0x10, 0xa4, 0x76, 0x55, 0x6e, 0x2f,
	0x37, 0xd4, 0xde, 0x33, 0xc5, 0x8b, 0x52, 0xbf, 0x1c, 0x6f, 0x3f, 0xc1, 0xb6, 0xd1, 0x31, 0x4c,
	0x7d, 0x04, 0xb7, 0x97, 0xa1, 0xe0, 0x72, 0xeb, 0x69, 0x6a, 0x1e, 0x1d, 0x62, 0x1e, 0xac, 0x91,
	0x71, 0xd4, 0xf5, 0x62, 0x36, 0x8a, 0x20, 0xb5, 0xdb, 0x08, 0xce, 0x89, 0x7a, 0x39, 0xa2, 0xc0,
	0x18, 0x32, 0xbd, 0xc5, 0xf5, 0x1a, 0xc4, 0x9b, 0x96, 0x7d, 0xa0, 0x91, 0x91, 0x73, 0x91, 0xa9,
	0xe1, 0x6b, 0x3a, 0x18, 0x40, 0x1f, 0x78, 0x4b, 0x19, 0xb4, 0x97, 0x31, 0x0f, 0xb9, 0xf6, 0x5c,
	0x58, 0xfb, 0xa7, 0xec, 0x38, 0xc7, 0xfa, 0xde, 0xec, 0x14, 0xb5, 0xc1, 0xff, 0xd1, 0x19, 0x79,
	0x7b, 0x58, 0x82, 0x19, 0xef, 0xdf, 0xa1, 0x60, 0xc4, 0x86, 0x87, 0xd1, 0x63, 0xda, 0x8b, 0x91,
	0x81, 0xc8, 0x78, 0x8c, 0x92, 0x98, 0xcc, 0xc9, 0x4d, 0x72, 0xc7, 0x59, 0x13, 0xfa, 0x15, 0x3b,
	0x2e, 0x03, 0x71, 0xd2, 0x8e, 0xdf, 0xc6, 0xfb, 0xf8, 0x95, 0x3b, 0x2e, 0x03, 0x71, 0x62, 0x8e,
	0xff, 0x99, 0xd5, 0x28, 0x16, 0x65, 0x4c, 0x43, 0x9a, 0x4b, 0x70, 0xea, 0x83, 0x30, 0xbd, 0xe6,
	0xe4, 0x85, 0x6b, 0xce, 0x2d, 0x58, 0x5c, 0x4b, 0x6e, 0x9c, 0xc4, 0x4c, 0x71, 0x21, 0x5f, 0x19,
	0x06, 0x39, 0x23, 0x4f, 0xb2, 0x7b, 0x58, 0x03, 0xa6, 0x4c, 0xdc, 0x1f, 0x5c, 0x86, 0xf9, 0x1d,
	0x2c, 0xa1, 0x7d, 0x1b, 0xc6, 0xe1, 0x96, 0x47, 0xff, 0xc9, 0x63, 0x99, 0x85, 0xf4, 0xff, 0x14,
	0xcb, 0x52, 0xc8, 0xff, 0xa5, 0x2c, 0x9b, 0x94, 0x64, 0x96, 0x3e, 0x5f, 0x01, 0xc9, 0xe8, 0x03,
	0xca, 0x90, 0xd4, 0xde, 0xe8, 0x0c, 0x2d, 0xdf, 0x84, 0xb9, 0x48, 0x03, 0xf2, 0xfd, 0x37, 0xd4,
	0x59, 0x98, 0xda, 0xda, 0x6c, 0xb6, 0x6a, 0xcd, 0x66, 0xe3, 0xee, 0xda, 0x83, 0xe6, 0x46, 0x61,
	0x4c, 0x9d, 0x83, 0x99, 0xe6, 0xf6, 0xbd, 0x8d, 0x2d, 0x61, 0x50, 0x59, 0xbe, 0x0d, 0xb3, 0x11,
	0x71, 0xf5, 0x02, 0xcc, 0xf9, 0x73, 0x5a, 0xdb, 0x9b, 0xad, 0x9d, 0xf5, 0x3b, 0x1b, 0xf5, 0x5a,
	0x61, 0x4c, 0x3d, 0x0f, 0x6a, 0xe0, 0x05, 0xd5, 0x57, 0x50, 0x96, 0x11, 0x4c, 0x0a, 0x77, 0x13,
	0x15, 0xe0, 0xcc, 0xce, 0x0f, 0x77, 0x9a, 0x1b, 0xf5, 0xc2, 0x98, 0x7a, 0x16, 0xf2, 0xb5, 0xfb,
	0xf7, 0x0b, 0xca, 0xf2, 0xd7, 0x00, 0x06, 0x17, 0x2f, 0x75, 0x01, 0x66, 0xd7, 0x1b, 0x1b, 0xb5,
	0xe6, 0x46, 0xcb, 0x85, 0xe9, 0x19, 0x58, 0xf9, 0xd7, 0x22, 0xe4, 0xeb, 0x8e, 0xae, 0x7e, 0x02,
	0x33, 0xe1, 0x0f, 0x0d, 0x5e, 0x8f, 0x5f, 0xf3, 0xe8, 0x07, 0x04, 0xa5, 0xb7, 0xb2, 0x4a, 0xf8,
	0xcb, 0xf1, 0x31, 0x4c, 0x87, 0x3e, 0x2d, 0xa8, 0xa6, 0xd4, 0xe5, 0x09, 0x94, 0xbe, 0x93, 0x51,
	0xc0, 0xb7, 0xfd, 0x2b, 0x05, 0xe6, 0xa5, 0xff, 0xaf, 0xde, 0x48, 0xd4, 0x28, 0x13, 0x2b, 0xdd,
	0x3c, 0x96, 0x98, 0x0f, 0x87, 0xc0, 0xb9, 0x40, 0x33, 0xfd, 0x5a, 0xa2, 0x3a, 0x71, 0x7a, 0xe9,
	0x46, 0xa6, 0xe9, 0xbe, 0xd5, 0x47, 0x30, 0x31, 0xe8, 0x30, 0x2f, 0xa7, 0xd2, 0x41, 0xe7, 0x96,
	0x56, 0xd2, 0xcf, 0xf5, 0x8d, 0x7d, 0x02, 0x33, 0xe1, 0xbe, 0x6e, 0x72, 0xb0, 0x85, 0x24, 0x52,
	0x04, 0xdb, 0xb0, 0x2e, 0xad, 0x09, 0x20, 0xf4, 0x48, 0xbf, 0x95, 0x46, 0x0f, 0x9f, 0x5c, 0x7a,
	0x33, 0xc3, 0x64, 0x71, 0x45, 0x03, 0x5d, 0xcf, 0xe4, 0x15, 0x15, 0xa7, 0xa7, 0x58, 0x51, 0x69,
	0x7f, 0xf3, 0x53, 0x05, 0x66, 0xa3, 0xcd, 0xc5, 0xe4, 0xe5, 0x8a, 0xc8, 0x94, 0xbe, 0x9b, 0x5d,
	0xc6, 0x47, 0xf1, 0x4c, 0x81, 0x42, 0xa4, 0xf5, 0xf5, 0x46, 0xa2, 0xc2, 0xb0, 0x48, 0xe9, 0xed,
	0xcc, 0x22, 0x62, 0x6d, 0x09, 0x35, 0x12, 0x93, 0x6b, 0x4b, 0x50, 0x20, 0x45, 0x6d, 0x19, 0xd2,
	0x19, 0x24, 0x70, 0x2e, 0xd0, 0x86, 0xbb, 0x96, 0x26, 0x7e, 0xfc, 0xe9, 0x29, 0x96, 0x5e, 0xd6,
	0x3d, 0x53, 0x1f, 0xc3, 0xa4, 0xd8, 0x39, 0xfb, 0x76, 0x1a, 0x2d, 0xde, 0xec, 0xd2, 0xf5, 0x2c,
	0xb3, 0x03, 0x05, 0x3c, 0xd8, 0xcd, 0xaa, 0xa6, 0x8c, 0x1a, 0x4f, 0x20, 0x4d, 0x01, 0x97, 0xb7,
	0xb1, 0x7e, 0xa1, 0xc0, 0x9c, 0xec, 0x2b, 0xad, 0xeb, 0x69, 0x77, 0x04, 0x51, 0xaa, 0xf4, 0xbd,
	0xe3, 0x48, 0xf9, 0x58, 0x7e, 0xab, 0xc0, 0x85, 0x61, 0x1f, 0x94, 0xbc, 0x95, 0x76, 0x63, 0x08,
	0x4b, 0x96, 0x6e, 0x1d, 0x57, 0xd2, 0xc7, 0xf5, 0x99, 0x02, 0x0b, 0xf2, 0xb6, 0xdc, 0x6a, 0x9a,
	0xf5, 0x8e, 0xca, 0x95, 0xde, 0x3d, 0x9e, 0x5c, 0x20, 0x2d, 0x83, 0x1d, 0xb5, 0x6a, 0x1a, 0x8d,
	0x82, 0x40, 0x9a, 0xb4, 0x94, 0x37, 0xcf, 0xdc, 0xda, 0x18, 0xed, 0x78, 0xad, 0x64, 0x50, 0xc7,
	0x65, 0x52, 0xd4, 0xc6, 0xe1, 0x7d, 0x2d, 0xbe, 0x26, 0x92, 0x26, 0x54, 0xaa, 0x35, 0x89, 0xca,
	0xa5, 0x5b, 0x93, 0x98, 0x96, 0x13, 0xe7, 0x25, 0xd4, 0x2c, 0x4a, 0xc5, 0x4b, 0x50, 0x26, 0x1d,
	0x2f, 0x43, 0x9a, 0x44, 0xee, 0x81, 0x4c, 0xda, 0xe3, 0xb9, 0x91, 0x32, 0x35, 0x83, 0x62, 0x29,
	0x0e, 0x64, 0xb1, 0xcd, 0x1c, 0x17, 0x8e, 0xb4, 0xf3, 0x92, 0x0c, 0x47, 0x26, 0x96, 0x02, 0x4e,
	0x6c, 0x8b, 0xc5, 0x85, 0x23, 0xed, 0x87, 0x24, 0xc3, 0x91, 0x89, 0xa5, 0x80, 0x13, 0xdb, 0xf8,
	0x70, 0x83, 0x58, 0xde, 0xa5, 0x58, 0x4d, 0x49, 0x7b, 0x48, 0x2e, 0x45, 0x10, 0xc7, 0xb7, 0x18,
	0x5c, 0x44, 0xf2, 0x1b, 0xfd, 0x6a, 0x4a, 0xe6, 0xb3, 0x23, 0x8a, 0xbf, 0x8e, 0xbb, 0x88, 0xe4,
	0xd7, 0xdf, 0xd5, 0x94, 0xe4, 0x67, 0x47, 0x14, 0x7b, 0xfd, 0x5d, 0xbb, 0xfb, 0x97, 0xe7, 0x65,
	0xe5, 0xcb, 0xe7, 0x65, 0xe5, 0x1f, 0xcf, 0xcb, 0xca, 0x6f, 0x5e, 0x94, 0xc7, 0xbe, 0x7c, 0x51,
	0x1e, 0xfb, 0xfb, 0x8b, 0xf2, 0xd8, 0x8f, 0xaa, 0xba, 0x41, 0xf6, 0x7a, 0xbb, 0x95, 0xb6, 0x75,
	0x50, 0x0d, 0xd8, 0xa8, 0x32, 0x1b, 0xd5, 0xa7, 0x55, 0xff, 0x23, 0xfc, 0xa3, 0x43, 0xec, 0xec,
	0x9e, 0xa1, 0xdf, 0xf7, 0xbe, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x6d, 0x13, 0x91,
	0x9c, 0x2f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateNFTSchema(ctx context.Context, in *MsgCreateNFTSchema, opts ...grpc.CallOption) (*MsgCreateNFTSchemaResponse, error)
	CreateMetadata(ctx context.Context, in *MsgCreateMetadata, opts ...grpc.CallOption) (*MsgCreateMetadataResponse, error)
	PerformActionByAdmin(ctx context.Context, in *MsgPerformActionByAdmin, opts ...grpc.CallOption) (*MsgPerformActionByAdminResponse, error)
	AddAttribute(ctx context.Context, in *MsgAddAttribute, opts ...grpc.CallOption) (*MsgAddAttributeResponse, error)
	AddAction(ctx context.Context, in *MsgAddAction, opts ...grpc.CallOption) (*MsgAddActionResponse, error)
	SetNFTAttribute(ctx context.Context, in *MsgSetNFTAttribute, opts ...grpc.CallOption) (*MsgSetNFTAttributeResponse, error)
	SetBaseUri(ctx context.Context, in *MsgSetBaseUri, opts ...grpc.CallOption) (*MsgSetBaseUriResponse, error)
	ToggleAction(ctx context.Context, in *MsgToggleAction, opts ...grpc.CallOption) (*MsgToggleActionResponse, error)
	ChangeSchemaOwner(ctx context.Context, in *MsgChangeSchemaOwner, opts ...grpc.CallOption) (*MsgChangeSchemaOwnerResponse, error)
	ResyncAttributes(ctx context.Context, in *MsgResyncAttributes, opts ...grpc.CallOption) (*MsgResyncAttributesResponse, error)
	ShowAttributes(ctx context.Context, in *MsgShowAttributes, opts ...grpc.CallOption) (*MsgShowAttributesResponse, error)
	SetFeeConfig(ctx context.Context, in *MsgSetFeeConfig, opts ...grpc.CallOption) (*MsgSetFeeConfigResponse, error)
	SetMintauth(ctx context.Context, in *MsgSetMintauth, opts ...grpc.CallOption) (*MsgSetMintauthResponse, error)
	ChangeOrgOwner(ctx context.Context, in *MsgChangeOrgOwner, opts ...grpc.CallOption) (*MsgChangeOrgOwnerResponse, error)
	CreateMultiMetadata(ctx context.Context, in *MsgCreateMultiMetadata, opts ...grpc.CallOption) (*MsgCreateMultiMetadataResponse, error)
	PerformMultiTokenAction(ctx context.Context, in *MsgPerformMultiTokenAction, opts ...grpc.CallOption) (*MsgPerformMultiTokenActionResponse, error)
	SetUriRetrievalMethod(ctx context.Context, in *MsgSetUriRetrievalMethod, opts ...grpc.CallOption) (*MsgSetUriRetrievalMethodResponse, error)
	SetOriginChain(ctx context.Context, in *MsgSetOriginChain, opts ...grpc.CallOption) (*MsgSetOriginChainResponse, error)
	SetOriginContract(ctx context.Context, in *MsgSetOriginContract, opts ...grpc.CallOption) (*MsgSetOriginContractResponse, error)
	SetAttributeOveriding(ctx context.Context, in *MsgSetAttributeOveriding, opts ...grpc.CallOption) (*MsgSetAttributeOveridingResponse, error)
	SetMetadataFormat(ctx context.Context, in *MsgSetMetadataFormat, opts ...grpc.CallOption) (*MsgSetMetadataFormatResponse, error)
	CreateActionExecutor(ctx context.Context, in *MsgCreateActionExecutor, opts ...grpc.CallOption) (*MsgCreateActionExecutorResponse, error)
	UpdateActionExecutor(ctx context.Context, in *MsgUpdateActionExecutor, opts ...grpc.CallOption) (*MsgUpdateActionExecutorResponse, error)
	DeleteActionExecutor(ctx context.Context, in *MsgDeleteActionExecutor, opts ...grpc.CallOption) (*MsgDeleteActionExecutorResponse, error)
	CreateSchemaAttribute(ctx context.Context, in *MsgCreateSchemaAttribute, opts ...grpc.CallOption) (*MsgCreateSchemaAttributeResponse, error)
	UpdateSchemaAttribute(ctx context.Context, in *MsgUpdateSchemaAttribute, opts ...grpc.CallOption) (*MsgUpdateSchemaAttributeResponse, error)
	DeleteSchemaAttribute(ctx context.Context, in *MsgDeleteSchemaAttribute, opts ...grpc.CallOption) (*MsgDeleteSchemaAttributeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateNFTSchema(ctx context.Context, in *MsgCreateNFTSchema, opts ...grpc.CallOption) (*MsgCreateNFTSchemaResponse, error) {
	out := new(MsgCreateNFTSchemaResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/CreateNFTSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMetadata(ctx context.Context, in *MsgCreateMetadata, opts ...grpc.CallOption) (*MsgCreateMetadataResponse, error) {
	out := new(MsgCreateMetadataResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/CreateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionByAdmin(ctx context.Context, in *MsgPerformActionByAdmin, opts ...grpc.CallOption) (*MsgPerformActionByAdminResponse, error) {
	out := new(MsgPerformActionByAdminResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/PerformActionByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAttribute(ctx context.Context, in *MsgAddAttribute, opts ...grpc.CallOption) (*MsgAddAttributeResponse, error) {
	out := new(MsgAddAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/AddAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAction(ctx context.Context, in *MsgAddAction, opts ...grpc.CallOption) (*MsgAddActionResponse, error) {
	out := new(MsgAddActionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/AddAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNFTAttribute(ctx context.Context, in *MsgSetNFTAttribute, opts ...grpc.CallOption) (*MsgSetNFTAttributeResponse, error) {
	out := new(MsgSetNFTAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetNFTAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBaseUri(ctx context.Context, in *MsgSetBaseUri, opts ...grpc.CallOption) (*MsgSetBaseUriResponse, error) {
	out := new(MsgSetBaseUriResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetBaseUri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleAction(ctx context.Context, in *MsgToggleAction, opts ...grpc.CallOption) (*MsgToggleActionResponse, error) {
	out := new(MsgToggleActionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/ToggleAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeSchemaOwner(ctx context.Context, in *MsgChangeSchemaOwner, opts ...grpc.CallOption) (*MsgChangeSchemaOwnerResponse, error) {
	out := new(MsgChangeSchemaOwnerResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/ChangeSchemaOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResyncAttributes(ctx context.Context, in *MsgResyncAttributes, opts ...grpc.CallOption) (*MsgResyncAttributesResponse, error) {
	out := new(MsgResyncAttributesResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/ResyncAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ShowAttributes(ctx context.Context, in *MsgShowAttributes, opts ...grpc.CallOption) (*MsgShowAttributesResponse, error) {
	out := new(MsgShowAttributesResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/ShowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFeeConfig(ctx context.Context, in *MsgSetFeeConfig, opts ...grpc.CallOption) (*MsgSetFeeConfigResponse, error) {
	out := new(MsgSetFeeConfigResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetFeeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMintauth(ctx context.Context, in *MsgSetMintauth, opts ...grpc.CallOption) (*MsgSetMintauthResponse, error) {
	out := new(MsgSetMintauthResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetMintauth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeOrgOwner(ctx context.Context, in *MsgChangeOrgOwner, opts ...grpc.CallOption) (*MsgChangeOrgOwnerResponse, error) {
	out := new(MsgChangeOrgOwnerResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/ChangeOrgOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMultiMetadata(ctx context.Context, in *MsgCreateMultiMetadata, opts ...grpc.CallOption) (*MsgCreateMultiMetadataResponse, error) {
	out := new(MsgCreateMultiMetadataResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/CreateMultiMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformMultiTokenAction(ctx context.Context, in *MsgPerformMultiTokenAction, opts ...grpc.CallOption) (*MsgPerformMultiTokenActionResponse, error) {
	out := new(MsgPerformMultiTokenActionResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/PerformMultiTokenAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetUriRetrievalMethod(ctx context.Context, in *MsgSetUriRetrievalMethod, opts ...grpc.CallOption) (*MsgSetUriRetrievalMethodResponse, error) {
	out := new(MsgSetUriRetrievalMethodResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetUriRetrievalMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOriginChain(ctx context.Context, in *MsgSetOriginChain, opts ...grpc.CallOption) (*MsgSetOriginChainResponse, error) {
	out := new(MsgSetOriginChainResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetOriginChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOriginContract(ctx context.Context, in *MsgSetOriginContract, opts ...grpc.CallOption) (*MsgSetOriginContractResponse, error) {
	out := new(MsgSetOriginContractResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetOriginContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAttributeOveriding(ctx context.Context, in *MsgSetAttributeOveriding, opts ...grpc.CallOption) (*MsgSetAttributeOveridingResponse, error) {
	out := new(MsgSetAttributeOveridingResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetAttributeOveriding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMetadataFormat(ctx context.Context, in *MsgSetMetadataFormat, opts ...grpc.CallOption) (*MsgSetMetadataFormatResponse, error) {
	out := new(MsgSetMetadataFormatResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/SetMetadataFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateActionExecutor(ctx context.Context, in *MsgCreateActionExecutor, opts ...grpc.CallOption) (*MsgCreateActionExecutorResponse, error) {
	out := new(MsgCreateActionExecutorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/CreateActionExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateActionExecutor(ctx context.Context, in *MsgUpdateActionExecutor, opts ...grpc.CallOption) (*MsgUpdateActionExecutorResponse, error) {
	out := new(MsgUpdateActionExecutorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/UpdateActionExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteActionExecutor(ctx context.Context, in *MsgDeleteActionExecutor, opts ...grpc.CallOption) (*MsgDeleteActionExecutorResponse, error) {
	out := new(MsgDeleteActionExecutorResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/DeleteActionExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSchemaAttribute(ctx context.Context, in *MsgCreateSchemaAttribute, opts ...grpc.CallOption) (*MsgCreateSchemaAttributeResponse, error) {
	out := new(MsgCreateSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/CreateSchemaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSchemaAttribute(ctx context.Context, in *MsgUpdateSchemaAttribute, opts ...grpc.CallOption) (*MsgUpdateSchemaAttributeResponse, error) {
	out := new(MsgUpdateSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/UpdateSchemaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSchemaAttribute(ctx context.Context, in *MsgDeleteSchemaAttribute, opts ...grpc.CallOption) (*MsgDeleteSchemaAttributeResponse, error) {
	out := new(MsgDeleteSchemaAttributeResponse)
	err := c.cc.Invoke(ctx, "/thesixnetwork.sixnft.nftmngr.Msg/DeleteSchemaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateNFTSchema(context.Context, *MsgCreateNFTSchema) (*MsgCreateNFTSchemaResponse, error)
	CreateMetadata(context.Context, *MsgCreateMetadata) (*MsgCreateMetadataResponse, error)
	PerformActionByAdmin(context.Context, *MsgPerformActionByAdmin) (*MsgPerformActionByAdminResponse, error)
	AddAttribute(context.Context, *MsgAddAttribute) (*MsgAddAttributeResponse, error)
	AddAction(context.Context, *MsgAddAction) (*MsgAddActionResponse, error)
	SetNFTAttribute(context.Context, *MsgSetNFTAttribute) (*MsgSetNFTAttributeResponse, error)
	SetBaseUri(context.Context, *MsgSetBaseUri) (*MsgSetBaseUriResponse, error)
	ToggleAction(context.Context, *MsgToggleAction) (*MsgToggleActionResponse, error)
	ChangeSchemaOwner(context.Context, *MsgChangeSchemaOwner) (*MsgChangeSchemaOwnerResponse, error)
	ResyncAttributes(context.Context, *MsgResyncAttributes) (*MsgResyncAttributesResponse, error)
	ShowAttributes(context.Context, *MsgShowAttributes) (*MsgShowAttributesResponse, error)
	SetFeeConfig(context.Context, *MsgSetFeeConfig) (*MsgSetFeeConfigResponse, error)
	SetMintauth(context.Context, *MsgSetMintauth) (*MsgSetMintauthResponse, error)
	ChangeOrgOwner(context.Context, *MsgChangeOrgOwner) (*MsgChangeOrgOwnerResponse, error)
	CreateMultiMetadata(context.Context, *MsgCreateMultiMetadata) (*MsgCreateMultiMetadataResponse, error)
	PerformMultiTokenAction(context.Context, *MsgPerformMultiTokenAction) (*MsgPerformMultiTokenActionResponse, error)
	SetUriRetrievalMethod(context.Context, *MsgSetUriRetrievalMethod) (*MsgSetUriRetrievalMethodResponse, error)
	SetOriginChain(context.Context, *MsgSetOriginChain) (*MsgSetOriginChainResponse, error)
	SetOriginContract(context.Context, *MsgSetOriginContract) (*MsgSetOriginContractResponse, error)
	SetAttributeOveriding(context.Context, *MsgSetAttributeOveriding) (*MsgSetAttributeOveridingResponse, error)
	SetMetadataFormat(context.Context, *MsgSetMetadataFormat) (*MsgSetMetadataFormatResponse, error)
	CreateActionExecutor(context.Context, *MsgCreateActionExecutor) (*MsgCreateActionExecutorResponse, error)
	UpdateActionExecutor(context.Context, *MsgUpdateActionExecutor) (*MsgUpdateActionExecutorResponse, error)
	DeleteActionExecutor(context.Context, *MsgDeleteActionExecutor) (*MsgDeleteActionExecutorResponse, error)
	CreateSchemaAttribute(context.Context, *MsgCreateSchemaAttribute) (*MsgCreateSchemaAttributeResponse, error)
	UpdateSchemaAttribute(context.Context, *MsgUpdateSchemaAttribute) (*MsgUpdateSchemaAttributeResponse, error)
	DeleteSchemaAttribute(context.Context, *MsgDeleteSchemaAttribute) (*MsgDeleteSchemaAttributeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateNFTSchema(ctx context.Context, req *MsgCreateNFTSchema) (*MsgCreateNFTSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNFTSchema not implemented")
}
func (*UnimplementedMsgServer) CreateMetadata(ctx context.Context, req *MsgCreateMetadata) (*MsgCreateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (*UnimplementedMsgServer) PerformActionByAdmin(ctx context.Context, req *MsgPerformActionByAdmin) (*MsgPerformActionByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionByAdmin not implemented")
}
func (*UnimplementedMsgServer) AddAttribute(ctx context.Context, req *MsgAddAttribute) (*MsgAddAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttribute not implemented")
}
func (*UnimplementedMsgServer) AddAction(ctx context.Context, req *MsgAddAction) (*MsgAddActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAction not implemented")
}
func (*UnimplementedMsgServer) SetNFTAttribute(ctx context.Context, req *MsgSetNFTAttribute) (*MsgSetNFTAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNFTAttribute not implemented")
}
func (*UnimplementedMsgServer) SetBaseUri(ctx context.Context, req *MsgSetBaseUri) (*MsgSetBaseUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseUri not implemented")
}
func (*UnimplementedMsgServer) ToggleAction(ctx context.Context, req *MsgToggleAction) (*MsgToggleActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAction not implemented")
}
func (*UnimplementedMsgServer) ChangeSchemaOwner(ctx context.Context, req *MsgChangeSchemaOwner) (*MsgChangeSchemaOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSchemaOwner not implemented")
}
func (*UnimplementedMsgServer) ResyncAttributes(ctx context.Context, req *MsgResyncAttributes) (*MsgResyncAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncAttributes not implemented")
}
func (*UnimplementedMsgServer) ShowAttributes(ctx context.Context, req *MsgShowAttributes) (*MsgShowAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAttributes not implemented")
}
func (*UnimplementedMsgServer) SetFeeConfig(ctx context.Context, req *MsgSetFeeConfig) (*MsgSetFeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeeConfig not implemented")
}
func (*UnimplementedMsgServer) SetMintauth(ctx context.Context, req *MsgSetMintauth) (*MsgSetMintauthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMintauth not implemented")
}
func (*UnimplementedMsgServer) ChangeOrgOwner(ctx context.Context, req *MsgChangeOrgOwner) (*MsgChangeOrgOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrgOwner not implemented")
}
func (*UnimplementedMsgServer) CreateMultiMetadata(ctx context.Context, req *MsgCreateMultiMetadata) (*MsgCreateMultiMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiMetadata not implemented")
}
func (*UnimplementedMsgServer) PerformMultiTokenAction(ctx context.Context, req *MsgPerformMultiTokenAction) (*MsgPerformMultiTokenActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformMultiTokenAction not implemented")
}
func (*UnimplementedMsgServer) SetUriRetrievalMethod(ctx context.Context, req *MsgSetUriRetrievalMethod) (*MsgSetUriRetrievalMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUriRetrievalMethod not implemented")
}
func (*UnimplementedMsgServer) SetOriginChain(ctx context.Context, req *MsgSetOriginChain) (*MsgSetOriginChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOriginChain not implemented")
}
func (*UnimplementedMsgServer) SetOriginContract(ctx context.Context, req *MsgSetOriginContract) (*MsgSetOriginContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOriginContract not implemented")
}
func (*UnimplementedMsgServer) SetAttributeOveriding(ctx context.Context, req *MsgSetAttributeOveriding) (*MsgSetAttributeOveridingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttributeOveriding not implemented")
}
func (*UnimplementedMsgServer) SetMetadataFormat(ctx context.Context, req *MsgSetMetadataFormat) (*MsgSetMetadataFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadataFormat not implemented")
}
func (*UnimplementedMsgServer) CreateActionExecutor(ctx context.Context, req *MsgCreateActionExecutor) (*MsgCreateActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionExecutor not implemented")
}
func (*UnimplementedMsgServer) UpdateActionExecutor(ctx context.Context, req *MsgUpdateActionExecutor) (*MsgUpdateActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActionExecutor not implemented")
}
func (*UnimplementedMsgServer) DeleteActionExecutor(ctx context.Context, req *MsgDeleteActionExecutor) (*MsgDeleteActionExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActionExecutor not implemented")
}
func (*UnimplementedMsgServer) CreateSchemaAttribute(ctx context.Context, req *MsgCreateSchemaAttribute) (*MsgCreateSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchemaAttribute not implemented")
}
func (*UnimplementedMsgServer) UpdateSchemaAttribute(ctx context.Context, req *MsgUpdateSchemaAttribute) (*MsgUpdateSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaAttribute not implemented")
}
func (*UnimplementedMsgServer) DeleteSchemaAttribute(ctx context.Context, req *MsgDeleteSchemaAttribute) (*MsgDeleteSchemaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaAttribute not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateNFTSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNFTSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNFTSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/CreateNFTSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNFTSchema(ctx, req.(*MsgCreateNFTSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/CreateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMetadata(ctx, req.(*MsgCreateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionByAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/PerformActionByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionByAdmin(ctx, req.(*MsgPerformActionByAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/AddAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAttribute(ctx, req.(*MsgAddAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/AddAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAction(ctx, req.(*MsgAddAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNFTAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNFTAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNFTAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetNFTAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNFTAttribute(ctx, req.(*MsgSetNFTAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBaseUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBaseUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBaseUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetBaseUri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBaseUri(ctx, req.(*MsgSetBaseUri))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/ToggleAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleAction(ctx, req.(*MsgToggleAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeSchemaOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeSchemaOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeSchemaOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/ChangeSchemaOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeSchemaOwner(ctx, req.(*MsgChangeSchemaOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResyncAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResyncAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResyncAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/ResyncAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResyncAttributes(ctx, req.(*MsgResyncAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ShowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgShowAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ShowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/ShowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ShowAttributes(ctx, req.(*MsgShowAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFeeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetFeeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFeeConfig(ctx, req.(*MsgSetFeeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMintauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMintauth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMintauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetMintauth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMintauth(ctx, req.(*MsgSetMintauth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeOrgOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeOrgOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeOrgOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/ChangeOrgOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeOrgOwner(ctx, req.(*MsgChangeOrgOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMultiMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMultiMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMultiMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/CreateMultiMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMultiMetadata(ctx, req.(*MsgCreateMultiMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformMultiTokenAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformMultiTokenAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformMultiTokenAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/PerformMultiTokenAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformMultiTokenAction(ctx, req.(*MsgPerformMultiTokenAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetUriRetrievalMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetUriRetrievalMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetUriRetrievalMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetUriRetrievalMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetUriRetrievalMethod(ctx, req.(*MsgSetUriRetrievalMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOriginChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOriginChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOriginChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetOriginChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOriginChain(ctx, req.(*MsgSetOriginChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOriginContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOriginContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOriginContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetOriginContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOriginContract(ctx, req.(*MsgSetOriginContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAttributeOveriding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAttributeOveriding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAttributeOveriding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetAttributeOveriding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAttributeOveriding(ctx, req.(*MsgSetAttributeOveriding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMetadataFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMetadataFormat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMetadataFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/SetMetadataFormat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMetadataFormat(ctx, req.(*MsgSetMetadataFormat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateActionExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/CreateActionExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateActionExecutor(ctx, req.(*MsgCreateActionExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateActionExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/UpdateActionExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateActionExecutor(ctx, req.(*MsgUpdateActionExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteActionExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteActionExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteActionExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/DeleteActionExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteActionExecutor(ctx, req.(*MsgDeleteActionExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSchemaAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/CreateSchemaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSchemaAttribute(ctx, req.(*MsgCreateSchemaAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSchemaAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/UpdateSchemaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSchemaAttribute(ctx, req.(*MsgUpdateSchemaAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSchemaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSchemaAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSchemaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thesixnetwork.sixnft.nftmngr.Msg/DeleteSchemaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSchemaAttribute(ctx, req.(*MsgDeleteSchemaAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thesixnetwork.sixnft.nftmngr.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNFTSchema",
			Handler:    _Msg_CreateNFTSchema_Handler,
		},
		{
			MethodName: "CreateMetadata",
			Handler:    _Msg_CreateMetadata_Handler,
		},
		{
			MethodName: "PerformActionByAdmin",
			Handler:    _Msg_PerformActionByAdmin_Handler,
		},
		{
			MethodName: "AddAttribute",
			Handler:    _Msg_AddAttribute_Handler,
		},
		{
			MethodName: "AddAction",
			Handler:    _Msg_AddAction_Handler,
		},
		{
			MethodName: "SetNFTAttribute",
			Handler:    _Msg_SetNFTAttribute_Handler,
		},
		{
			MethodName: "SetBaseUri",
			Handler:    _Msg_SetBaseUri_Handler,
		},
		{
			MethodName: "ToggleAction",
			Handler:    _Msg_ToggleAction_Handler,
		},
		{
			MethodName: "ChangeSchemaOwner",
			Handler:    _Msg_ChangeSchemaOwner_Handler,
		},
		{
			MethodName: "ResyncAttributes",
			Handler:    _Msg_ResyncAttributes_Handler,
		},
		{
			MethodName: "ShowAttributes",
			Handler:    _Msg_ShowAttributes_Handler,
		},
		{
			MethodName: "SetFeeConfig",
			Handler:    _Msg_SetFeeConfig_Handler,
		},
		{
			MethodName: "SetMintauth",
			Handler:    _Msg_SetMintauth_Handler,
		},
		{
			MethodName: "ChangeOrgOwner",
			Handler:    _Msg_ChangeOrgOwner_Handler,
		},
		{
			MethodName: "CreateMultiMetadata",
			Handler:    _Msg_CreateMultiMetadata_Handler,
		},
		{
			MethodName: "PerformMultiTokenAction",
			Handler:    _Msg_PerformMultiTokenAction_Handler,
		},
		{
			MethodName: "SetUriRetrievalMethod",
			Handler:    _Msg_SetUriRetrievalMethod_Handler,
		},
		{
			MethodName: "SetOriginChain",
			Handler:    _Msg_SetOriginChain_Handler,
		},
		{
			MethodName: "SetOriginContract",
			Handler:    _Msg_SetOriginContract_Handler,
		},
		{
			MethodName: "SetAttributeOveriding",
			Handler:    _Msg_SetAttributeOveriding_Handler,
		},
		{
			MethodName: "SetMetadataFormat",
			Handler:    _Msg_SetMetadataFormat_Handler,
		},
		{
			MethodName: "CreateActionExecutor",
			Handler:    _Msg_CreateActionExecutor_Handler,
		},
		{
			MethodName: "UpdateActionExecutor",
			Handler:    _Msg_UpdateActionExecutor_Handler,
		},
		{
			MethodName: "DeleteActionExecutor",
			Handler:    _Msg_DeleteActionExecutor_Handler,
		},
		{
			MethodName: "CreateSchemaAttribute",
			Handler:    _Msg_CreateSchemaAttribute_Handler,
		},
		{
			MethodName: "UpdateSchemaAttribute",
			Handler:    _Msg_UpdateSchemaAttribute_Handler,
		},
		{
			MethodName: "DeleteSchemaAttribute",
			Handler:    _Msg_DeleteSchemaAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nftmngr/tx.proto",
}

func (m *MsgCreateNFTSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNFTSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNFTSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaBase64) > 0 {
		i -= len(m.NftSchemaBase64)
		copy(dAtA[i:], m.NftSchemaBase64)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaBase64)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNFTSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNFTSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNFTSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NFTData) > 0 {
		i -= len(m.Base64NFTData)
		copy(dAtA[i:], m.Base64NFTData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NFTData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMultiMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMultiMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMultiMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NFTData) > 0 {
		i -= len(m.Base64NFTData)
		copy(dAtA[i:], m.Base64NFTData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NFTData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMultiMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMultiMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMultiMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenseaAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenseaAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenseaAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TraitType) > 0 {
		i -= len(m.TraitType)
		copy(dAtA[i:], m.TraitType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TraitType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatedOpenseaAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedOpenseaAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatedOpenseaAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdatedOriginData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedOriginData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatedOriginData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOriginData != nil {
		{
			size := m.UpdatedOriginData.Size()
			i -= size
			if _, err := m.UpdatedOriginData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdatedOriginData_Opensea) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatedOriginData_Opensea) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opensea != nil {
		{
			size, err := m.Opensea.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ActionParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionByAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionByAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionByAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionByAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionByAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionByAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		i -= len(m.Parameters)
		copy(dAtA[i:], m.Parameters)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Parameters)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenOneAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenOneAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenOneAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenOneActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenOneActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenOneActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenMultiAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenMultiAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenMultiAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parameters[iNdEx])
			copy(dAtA[i:], m.Parameters[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Parameters[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformMultiTokenMultiActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformMultiTokenMultiActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformMultiTokenMultiActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformOneTokenMultiAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformOneTokenMultiAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformOneTokenMultiAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parameters[iNdEx])
			copy(dAtA[i:], m.Parameters[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Parameters[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformOneTokenMultiActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformOneTokenMultiActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformOneTokenMultiActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		for iNdEx := len(m.Action) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Action[iNdEx])
			copy(dAtA[i:], m.Action[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Action[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NewAttriuteDefenition) > 0 {
		i -= len(m.Base64NewAttriuteDefenition)
		copy(dAtA[i:], m.Base64NewAttriuteDefenition)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NewAttriuteDefenition)))
		i--
		dAtA[i] = 0x22
	}
	if m.Location != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnchainData != nil {
		{
			size, err := m.OnchainData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NewAction) > 0 {
		i -= len(m.Base64NewAction)
		copy(dAtA[i:], m.Base64NewAction)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NewAction)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnchainData != nil {
		{
			size, err := m.OnchainData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetNFTAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNFTAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNFTAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NftAttributeValue) > 0 {
		i -= len(m.Base64NftAttributeValue)
		copy(dAtA[i:], m.Base64NftAttributeValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NftAttributeValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetNFTAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNFTAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNFTAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftAttributeValue) > 0 {
		i -= len(m.NftAttributeValue)
		copy(dAtA[i:], m.NftAttributeValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftAttributeValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AttributeName) > 0 {
		i -= len(m.AttributeName)
		copy(dAtA[i:], m.AttributeName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AttributeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBaseUri) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBaseUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBaseUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewBaseUri) > 0 {
		i -= len(m.NewBaseUri)
		copy(dAtA[i:], m.NewBaseUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewBaseUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBaseUriResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBaseUriResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBaseUriResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnchainDataAction != nil {
		{
			size, err := m.OnchainDataAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeSchemaOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeSchemaOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeSchemaOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeSchemaOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeSchemaOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeSchemaOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResyncAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResyncAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResyncAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgShowAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShowAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShowAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeNames) > 0 {
		for iNdEx := len(m.AttributeNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AttributeNames[iNdEx])
			copy(dAtA[i:], m.AttributeNames[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AttributeNames[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Show {
		i--
		if m.Show {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgShowAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShowAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShowAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchema) > 0 {
		i -= len(m.NftSchema)
		copy(dAtA[i:], m.NftSchema)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResyncAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResyncAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResyncAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeSubject != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeSubject))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewFeeConfigBase64) > 0 {
		i -= len(m.NewFeeConfigBase64)
		copy(dAtA[i:], m.NewFeeConfigBase64)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewFeeConfigBase64)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMintauth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMintauth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMintauth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizeTo != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuthorizeTo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMintauthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMintauthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMintauthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeOrgOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeOrgOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeOrgOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToNewOwner) > 0 {
		i -= len(m.ToNewOwner)
		copy(dAtA[i:], m.ToNewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToNewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeOrgOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeOrgOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeOrgOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldOwner) > 0 {
		i -= len(m.OldOwner)
		copy(dAtA[i:], m.OldOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OldOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetUriRetrievalMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetUriRetrievalMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetUriRetrievalMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewMethod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewMethod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetUriRetrievalMethodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetUriRetrievalMethodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetUriRetrievalMethodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMethod) > 0 {
		i -= len(m.NewMethod)
		copy(dAtA[i:], m.NewMethod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMethod)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOriginChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOriginChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOriginChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOriginChain) > 0 {
		i -= len(m.NewOriginChain)
		copy(dAtA[i:], m.NewOriginChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOriginChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOriginChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOriginChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOriginChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOriginChain) > 0 {
		i -= len(m.NewOriginChain)
		copy(dAtA[i:], m.NewOriginChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOriginChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOriginContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOriginContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOriginContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOriginContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOriginContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOriginContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAttributeOveriding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAttributeOveriding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAttributeOveriding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewOveridingType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewOveridingType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAttributeOveridingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAttributeOveridingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAttributeOveridingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOveriding) > 0 {
		i -= len(m.NewOveriding)
		copy(dAtA[i:], m.NewOveriding)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOveriding)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMetadataFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMetadataFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMetadataFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewFormat) > 0 {
		i -= len(m.NewFormat)
		copy(dAtA[i:], m.NewFormat)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewFormat)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMetadataFormatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMetadataFormatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMetadataFormatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewFormat) > 0 {
		i -= len(m.NewFormat)
		copy(dAtA[i:], m.NewFormat)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewFormat)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaCode) > 0 {
		i -= len(m.SchemaCode)
		copy(dAtA[i:], m.SchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateActionExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateActionExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateActionExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateActionExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateActionExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateActionExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateActionExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateActionExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateActionExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateActionExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateActionExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateActionExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteActionExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteActionExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteActionExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteActionExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteActionExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteActionExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSchemaAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSchemaAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSchemaAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NewAttriuteDefenition) > 0 {
		i -= len(m.Base64NewAttriuteDefenition)
		copy(dAtA[i:], m.Base64NewAttriuteDefenition)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NewAttriuteDefenition)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSchemaAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSchemaAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSchemaAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewAttribute != nil {
		{
			size, err := m.NewAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSchemaAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSchemaAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSchemaAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Base64NewAttriuteDefenition) > 0 {
		i -= len(m.Base64NewAttriuteDefenition)
		copy(dAtA[i:], m.Base64NewAttriuteDefenition)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base64NewAttriuteDefenition)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSchemaAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSchemaAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSchemaAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewAttribute != nil {
		{
			size, err := m.NewAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSchemaAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSchemaAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSchemaAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSchemaAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSchemaAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSchemaAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftSchemaCode) > 0 {
		i -= len(m.NftSchemaCode)
		copy(dAtA[i:], m.NftSchemaCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSchemaCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateNFTSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaBase64)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNFTSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base64NFTData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMultiMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Base64NFTData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMultiMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *OpenseaAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraitType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UpdatedOpenseaAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *UpdatedOriginData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedOriginData != nil {
		n += m.UpdatedOriginData.Size()
	}
	return n
}

func (m *UpdatedOriginData_Opensea) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opensea != nil {
		l = m.Opensea.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *ActionParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformActionByAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformActionByAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformMultiTokenAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Parameters)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformMultiTokenActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformMultiTokenOneAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformMultiTokenOneActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformMultiTokenMultiAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, s := range m.Parameters {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformMultiTokenMultiActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformOneTokenMultiAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, s := range m.Parameters {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPerformOneTokenMultiActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Action) > 0 {
		for _, s := range m.Action {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Location != 0 {
		n += 1 + sovTx(uint64(m.Location))
	}
	l = len(m.Base64NewAttriuteDefenition)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OnchainData != nil {
		l = m.OnchainData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base64NewAction)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OnchainData != nil {
		l = m.OnchainData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetNFTAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base64NftAttributeValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetNFTAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AttributeName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftAttributeValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBaseUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewBaseUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBaseUriResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgToggleAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Disable {
		n += 2
	}
	return n
}

func (m *MsgToggleActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OnchainDataAction != nil {
		l = m.OnchainDataAction.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeSchemaOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeSchemaOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgResyncAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgShowAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Show {
		n += 2
	}
	if len(m.AttributeNames) > 0 {
		for _, s := range m.AttributeNames {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgShowAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchema)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgResyncAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetFeeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewFeeConfigBase64)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeSubject != 0 {
		n += 1 + sovTx(uint64(m.FeeSubject))
	}
	return n
}

func (m *MsgSetFeeConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMintauth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuthorizeTo != 0 {
		n += 1 + sovTx(uint64(m.AuthorizeTo))
	}
	return n
}

func (m *MsgSetMintauthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeOrgOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToNewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeOrgOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OldOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetUriRetrievalMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewMethod != 0 {
		n += 1 + sovTx(uint64(m.NewMethod))
	}
	return n
}

func (m *MsgSetUriRetrievalMethodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMethod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOriginChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOriginChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOriginChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOriginChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOriginContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOriginContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetAttributeOveriding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewOveridingType != 0 {
		n += 1 + sovTx(uint64(m.NewOveridingType))
	}
	return n
}

func (m *MsgSetAttributeOveridingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOveriding)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMetadataFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewFormat)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMetadataFormatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewFormat)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateActionExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateActionExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateActionExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateActionExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteActionExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteActionExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSchemaAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base64NewAttriuteDefenition)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSchemaAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewAttribute != nil {
		l = m.NewAttribute.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSchemaAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base64NewAttriuteDefenition)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSchemaAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewAttribute != nil {
		l = m.NewAttribute.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteSchemaAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteSchemaAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftSchemaCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateNFTSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNFTSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNFTSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaBase64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaBase64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNFTSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNFTSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNFTSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NFTData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NFTData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMultiMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMultiMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMultiMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NFTData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NFTData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMultiMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMultiMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMultiMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenseaAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenseaAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenseaAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraitType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Any{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedOpenseaAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedOpenseaAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedOpenseaAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &OpenseaAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedOriginData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedOriginData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedOriginData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opensea", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatedOpenseaAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedOriginData = &UpdatedOriginData_Opensea{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionByAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionByAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionByAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &ActionParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionByAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionByAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionByAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenOneAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenOneAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenOneAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &ActionParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenOneActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenOneActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenOneActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenMultiAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenMultiAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenMultiAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformMultiTokenMultiActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformMultiTokenMultiActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformMultiTokenMultiActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformOneTokenMultiAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformOneTokenMultiAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformOneTokenMultiAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformOneTokenMultiActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformOneTokenMultiActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformOneTokenMultiActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= AttributeLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NewAttriuteDefenition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NewAttriuteDefenition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnchainData == nil {
				m.OnchainData = &OnChainData{}
			}
			if err := m.OnchainData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NewAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NewAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnchainData == nil {
				m.OnchainData = &OnChainData{}
			}
			if err := m.OnchainData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNFTAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNFTAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNFTAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NftAttributeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NftAttributeValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNFTAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNFTAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNFTAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAttributeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAttributeValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBaseUri) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBaseUri: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBaseUri: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewBaseUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBaseUriResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBaseUriResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBaseUriResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainDataAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnchainDataAction == nil {
				m.OnchainDataAction = &OnChainData{}
			}
			if err := m.OnchainDataAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeSchemaOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeSchemaOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeSchemaOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeSchemaOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeSchemaOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeSchemaOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResyncAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResyncAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResyncAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShowAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShowAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShowAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeNames = append(m.AttributeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShowAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShowAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShowAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResyncAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResyncAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResyncAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFeeConfigBase64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFeeConfigBase64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSubject", wireType)
			}
			m.FeeSubject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeSubject |= FeeSubject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMintauth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMintauth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMintauth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeTo", wireType)
			}
			m.AuthorizeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeTo |= AuthorizeTo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMintauthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMintauthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMintauthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeOrgOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeOrgOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeOrgOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToNewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeOrgOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeOrgOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeOrgOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetUriRetrievalMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetUriRetrievalMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetUriRetrievalMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMethod", wireType)
			}
			m.NewMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewMethod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetUriRetrievalMethodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetUriRetrievalMethodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetUriRetrievalMethodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOriginChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOriginChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOriginChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOriginChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOriginChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOriginChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOriginContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOriginContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOriginContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOriginContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOriginContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOriginContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAttributeOveriding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAttributeOveriding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAttributeOveriding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOveridingType", wireType)
			}
			m.NewOveridingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOveridingType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAttributeOveridingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAttributeOveridingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAttributeOveridingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOveriding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOveriding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMetadataFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMetadataFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMetadataFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMetadataFormatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMetadataFormatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMetadataFormatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateActionExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateActionExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateActionExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateActionExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateActionExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateActionExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateActionExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateActionExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateActionExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateActionExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateActionExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateActionExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteActionExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteActionExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteActionExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteActionExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteActionExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteActionExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSchemaAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSchemaAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSchemaAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NewAttriuteDefenition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NewAttriuteDefenition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSchemaAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSchemaAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSchemaAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAttribute == nil {
				m.NewAttribute = &SchemaAttribute{}
			}
			if err := m.NewAttribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSchemaAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSchemaAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSchemaAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base64NewAttriuteDefenition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base64NewAttriuteDefenition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSchemaAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSchemaAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSchemaAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAttribute == nil {
				m.NewAttribute = &SchemaAttribute{}
			}
			if err := m.NewAttribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSchemaAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSchemaAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSchemaAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSchemaAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSchemaAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSchemaAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSchemaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSchemaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
