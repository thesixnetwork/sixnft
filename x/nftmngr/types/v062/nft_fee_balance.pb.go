// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmngr/v062/nft_fee_balance.proto

package v062

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NFTFeeBalance struct {
	FeeBalances map[int32]string `protobuf:"bytes,1,rep,name=fee_balances,json=feeBalances,proto3" json:"fee_balances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NFTFeeBalance) Reset()         { *m = NFTFeeBalance{} }
func (m *NFTFeeBalance) String() string { return proto.CompactTextString(m) }
func (*NFTFeeBalance) ProtoMessage()    {}
func (*NFTFeeBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9191b9809b6b09b3, []int{0}
}
func (m *NFTFeeBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTFeeBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTFeeBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTFeeBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTFeeBalance.Merge(m, src)
}
func (m *NFTFeeBalance) XXX_Size() int {
	return m.Size()
}
func (m *NFTFeeBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTFeeBalance.DiscardUnknown(m)
}

var xxx_messageInfo_NFTFeeBalance proto.InternalMessageInfo

func (m *NFTFeeBalance) GetFeeBalances() map[int32]string {
	if m != nil {
		return m.FeeBalances
	}
	return nil
}

func init() {
	proto.RegisterType((*NFTFeeBalance)(nil), "thesixnetwork.sixnft.nftmngr.v062.NFTFeeBalance")
	proto.RegisterMapType((map[int32]string)(nil), "thesixnetwork.sixnft.nftmngr.v062.NFTFeeBalance.FeeBalancesEntry")
}

func init() {
	proto.RegisterFile("nftmngr/v062/nft_fee_balance.proto", fileDescriptor_9191b9809b6b09b3)
}

var fileDescriptor_9191b9809b6b09b3 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xca, 0x4b, 0x2b, 0xc9,
	0xcd, 0x4b, 0x2f, 0xd2, 0x2f, 0x33, 0x30, 0x33, 0xd2, 0xcf, 0x4b, 0x2b, 0x89, 0x4f, 0x4b, 0x4d,
	0x8d, 0x4f, 0x4a, 0xcc, 0x49, 0xcc, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52,
	0x2c, 0xc9, 0x48, 0x2d, 0xce, 0xac, 0xc8, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x03, 0x31,
	0xd3, 0x4a, 0xf4, 0xa0, 0x1a, 0xf5, 0x40, 0x1a, 0x95, 0xb6, 0x32, 0x72, 0xf1, 0xfa, 0xb9, 0x85,
	0xb8, 0xa5, 0xa6, 0x3a, 0x41, 0xb4, 0x0a, 0xa5, 0x70, 0xf1, 0x20, 0x99, 0x54, 0x2c, 0xc1, 0xa8,
	0xc0, 0xac, 0xc1, 0x6d, 0xe4, 0xa8, 0x47, 0xd0, 0x2c, 0x3d, 0x14, 0x73, 0xf4, 0x10, 0xcc, 0x62,
	0xd7, 0xbc, 0x92, 0xa2, 0xca, 0x20, 0xee, 0x34, 0x84, 0x88, 0x94, 0x1d, 0x97, 0x00, 0xba, 0x02,
	0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x10, 0x53,
	0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08,
	0xc2, 0xb1, 0x62, 0xb2, 0x60, 0x74, 0xf2, 0x3b, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x93, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x14, 0x37,
	0xeb, 0x43, 0xdc, 0xac, 0x5f, 0xa1, 0x0f, 0x0b, 0xba, 0x92, 0xca, 0x82, 0xd4, 0x62, 0x70, 0x00,
	0x26, 0xb1, 0x81, 0x43, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x0e, 0xcb, 0xe7, 0x57,
	0x01, 0x00, 0x00,
}

func (m *NFTFeeBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTFeeBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTFeeBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeBalances) > 0 {
		for k := range m.FeeBalances {
			v := m.FeeBalances[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNftFeeBalance(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintNftFeeBalance(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNftFeeBalance(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftFeeBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftFeeBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NFTFeeBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeBalances) > 0 {
		for k, v := range m.FeeBalances {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNftFeeBalance(uint64(k)) + 1 + len(v) + sovNftFeeBalance(uint64(len(v)))
			n += mapEntrySize + 1 + sovNftFeeBalance(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNftFeeBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftFeeBalance(x uint64) (n int) {
	return sovNftFeeBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NFTFeeBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftFeeBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTFeeBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTFeeBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftFeeBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftFeeBalance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftFeeBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeBalances == nil {
				m.FeeBalances = make(map[int32]string)
			}
			var mapkey int32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNftFeeBalance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNftFeeBalance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNftFeeBalance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNftFeeBalance
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNftFeeBalance
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNftFeeBalance(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNftFeeBalance
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FeeBalances[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftFeeBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftFeeBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftFeeBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftFeeBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftFeeBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftFeeBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftFeeBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftFeeBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftFeeBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftFeeBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftFeeBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftFeeBalance = fmt.Errorf("proto: unexpected end of group")
)
