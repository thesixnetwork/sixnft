syntax = "proto3";
package thesixnetwork.sixnft.nftmngr;

import "nftmngr/action_executor.proto";
import "nftmngr/schema_attribute.proto";
// this line is used by starport scaffolding # proto/tx/import
import "nftmngr/on_chain_data.proto";
import "nftmngr/attribute_definition.proto";
import "nftmngr/nft_attribute_value.proto";

import "google/protobuf/any.proto";
option go_package = "github.com/thesixnetwork/sixnft/x/nftmngr/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateNFTSchema(MsgCreateNFTSchema) returns (MsgCreateNFTSchemaResponse);
  rpc CreateMetadata(MsgCreateMetadata) returns (MsgCreateMetadataResponse);
  rpc PerformActionByAdmin(MsgPerformActionByAdmin) returns (MsgPerformActionByAdminResponse);
  rpc AddAttribute(MsgAddAttribute) returns (MsgAddAttributeResponse);
  rpc AddAction(MsgAddAction) returns (MsgAddActionResponse);
  rpc SetBaseUri(MsgSetBaseUri) returns (MsgSetBaseUriResponse);
  rpc ToggleAction(MsgToggleAction) returns (MsgToggleActionResponse);
  rpc ChangeSchemaOwner(MsgChangeSchemaOwner) returns (MsgChangeSchemaOwnerResponse);
  rpc ResyncAttributes(MsgResyncAttributes) returns (MsgResyncAttributesResponse);
  rpc ShowAttributes(MsgShowAttributes) returns (MsgShowAttributesResponse);
  rpc SetFeeConfig(MsgSetFeeConfig) returns (MsgSetFeeConfigResponse);
  rpc SetMintauth(MsgSetMintauth) returns (MsgSetMintauthResponse);
  rpc ChangeOrgOwner(MsgChangeOrgOwner) returns (MsgChangeOrgOwnerResponse);
  rpc CreateMultiMetadata(MsgCreateMultiMetadata) returns (MsgCreateMultiMetadataResponse);
  rpc PerformMultiTokenAction(MsgPerformMultiTokenAction) returns (MsgPerformMultiTokenActionResponse);
  rpc SetUriRetrievalMethod(MsgSetUriRetrievalMethod) returns (MsgSetUriRetrievalMethodResponse);
  rpc SetOriginChain(MsgSetOriginChain) returns (MsgSetOriginChainResponse);
  rpc SetOriginContract(MsgSetOriginContract) returns (MsgSetOriginContractResponse);
  rpc SetAttributeOveriding(MsgSetAttributeOveriding) returns (MsgSetAttributeOveridingResponse);
  rpc SetMetadataFormat(MsgSetMetadataFormat) returns (MsgSetMetadataFormatResponse);
  rpc CreateActionExecutor(MsgCreateActionExecutor) returns (MsgCreateActionExecutorResponse);
  rpc UpdateActionExecutor(MsgUpdateActionExecutor) returns (MsgUpdateActionExecutorResponse);
  rpc DeleteActionExecutor(MsgDeleteActionExecutor) returns (MsgDeleteActionExecutorResponse);
  rpc UpdateSchemaAttribute(MsgUpdateSchemaAttribute) returns (MsgUpdateSchemaAttributeResponse);
  // rpc DeleteSchemaAttribute(MsgDeleteSchemaAttribute) returns (MsgDeleteSchemaAttributeResponse);
  rpc UpdateAction(MsgUpdateAction) returns (MsgUpdateActionResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

enum AttributeLocation {
  NFT_ATTRIBUTE = 0;
  TOKEN_ATTRIBUTE = 1;
}

enum AuthorizeTo {
  SYSTEM = 0;
  ALL = 1;
}

message MsgCreateNFTSchema {
  string creator = 1;
  string nftSchemaBase64 = 2;
}

message MsgCreateNFTSchemaResponse {
  string code = 1;
}

message MsgCreateMetadata {
  string creator = 1;
  string nftSchemaCode = 2;
  string tokenId = 3;
  string base64NFTData = 4;
}

message MsgCreateMetadataResponse {
  string nftSchemaCode = 1;
  string tokenId = 2;
}

message MsgCreateMultiMetadata {
  string creator = 1;
  string nftSchemaCode = 2;
  repeated string tokenId = 3;
  string base64NFTData = 4;
}

message MsgCreateMultiMetadataResponse {
  string nftSchemaCode = 1;
  repeated string tokenId = 2;
}

message OpenseaAttribute{
  string trait_type = 1; 
  google.protobuf.Any value = 2;
}

message UpdatedOpenseaAttributes {
  repeated OpenseaAttribute attributes = 1;
}

message UpdatedOriginData {
  oneof updated_origin_data {
    UpdatedOpenseaAttributes opensea = 1;
  }
}

// ActionParameter
message ActionParameter {
  string name = 1;
  string value = 2;
}

message MsgPerformActionByAdmin {
  string creator = 1;
  string nft_schema_code = 2;
  string tokenId = 3;
  string action = 4;
  string ref_id = 5;
  repeated ActionParameter parameters = 6;
}

message MsgPerformActionByAdminResponse {
  string nft_schema_code = 1;
  string token_id = 2;
}

message MsgPerformMultiTokenAction {
  string creator = 1;
  string nft_schema_code = 2;
  repeated string tokenId = 3;
  repeated string action = 4;
  string ref_id = 5;
  string parameters = 6;
}

message MsgPerformMultiTokenActionResponse {
  string nftSchemaCode = 1;
  repeated string tokenId = 2;
  repeated string action = 3;
}

message MsgPerformMultiTokenOneAction {
  string creator = 1;
  string nftSchemaCode = 2;
  repeated string tokenId = 3;
  string action = 4;
  string refId = 5;
  repeated ActionParameter parameters = 6;
}

message MsgPerformMultiTokenOneActionResponse {
  string nftSchemaCode = 1;
  repeated string tokenId = 2;
}

message MsgPerformMultiTokenMultiAction {
  string creator = 1;
  string nftSchemaCode = 2;
  repeated string tokenId = 3;
  repeated string action = 4;
  string refId = 5;
  repeated string parameters = 6;
}

message MsgPerformMultiTokenMultiActionResponse {
  string nftSchemaCode = 1;
  repeated string tokenId = 2;
  repeated string action = 3;
}

message MsgPerformOneTokenMultiAction {
  string creator = 1;
  string nftSchemaCode = 2;
  string tokenId = 3;
  repeated string action = 4;
  string refId = 5;
  repeated string parameters = 6;
}

message MsgPerformOneTokenMultiActionResponse {
  string nftSchemaCode = 1;
  string tokenId = 2;
  repeated string action = 3;
}

message MsgAddAttribute {
  string creator = 1;
  string code = 2;
  AttributeLocation location = 3;
  string base64NewAttriuteDefenition = 4;
}

message MsgAddAttributeResponse {
  string code = 1;
  string name = 2;
  OnChainData onchainData = 3;
}

message MsgAddAction {
  string creator = 1;
  string code = 2;
  string base64NewAction = 3;
}

message MsgAddActionResponse {
  string code = 1;
  string name = 2;
  OnChainData onchainData = 3;
}


message MsgSetBaseUri {
  string creator = 1;
  string code = 2;
  string newBaseUri = 3;
}

message MsgSetBaseUriResponse {
  string code = 1;
  string uri = 2;
}

message MsgToggleAction {
  string creator = 1;
  string code = 2;
  string action = 3;
  bool disable = 4;
}

message MsgToggleActionResponse {
  string code = 1;
  string name = 2;
  OnChainData onchainDataAction = 3;
}

message MsgChangeSchemaOwner {
  string creator = 1;
  string nftSchemaCode = 2;
  string newOwner = 3;
}

message MsgChangeSchemaOwnerResponse {
  string nftSchemaCode = 1;
  string newOwner = 2;
}

message MsgResyncAttributesResponse {
  string nftSchemaCode = 1;
}

message MsgShowAttributes {
  string creator = 1;
  string nftSchemaCode = 2;
  bool show = 3;
  repeated string attributeNames = 4;
}

message MsgShowAttributesResponse {
  string nftSchema = 1;
}
message MsgResyncAttributes {
  string creator = 1;
  string nftSchemaCode = 2;
  string tokenId = 3;
}

enum FeeSubject {
  CREATE_NFT_SCHEMA = 0;
}

message MsgSetFeeConfig {
  string creator = 1;
  string newFeeConfigBase64 = 2;
  FeeSubject feeSubject = 3;
}

message MsgSetFeeConfigResponse {
}

message MsgSetMintauth {
  string creator = 1;
  string nftSchemaCode = 2;
  AuthorizeTo authorizeTo = 3;
}

message MsgSetMintauthResponse {
  string nftSchemaCode = 1;
}

message MsgChangeOrgOwner {
  string creator = 1;
  string orgName = 2;
  string toNewOwner = 3;
}

message MsgChangeOrgOwnerResponse {
  string orgName = 1;
  string oldOwner = 2;
  string newOwner = 3;
}

message MsgSetUriRetrievalMethod {
  string creator = 1;
  string schemaCode = 2;
  int32 newMethod = 3;
}

message MsgSetUriRetrievalMethodResponse {
  string schemaCode = 1;
  string newMethod = 2;
}

message MsgSetOriginChain {
  string creator = 1;
  string schemaCode = 2;
  string newOriginChain = 3;
}

message MsgSetOriginChainResponse {
  string schemaCode = 1;
  string newOriginChain = 2;
}

message MsgSetOriginContract {
  string creator = 1;
  string schemaCode = 2;
  string newContractAddress = 3;
}

message MsgSetOriginContractResponse {
  string schemaCode = 1;
  string newContractAddress = 2;
}

message MsgSetAttributeOveriding {
  string creator = 1;
  string schemaCode = 2;
  int32 newOveridingType = 3;
}

message MsgSetAttributeOveridingResponse {
  string schemaCode = 1;
  string newOveriding = 2;
}

message MsgSetMetadataFormat {
  string creator = 1;
  string schemaCode = 2;
  string newFormat = 3;
}

message MsgSetMetadataFormatResponse {
  string schemaCode = 1;
  string newFormat = 2;
}

message MsgCreateActionExecutor {
  string creator = 1;
  string nftSchemaCode = 2;
  string executorAddress = 3;

}
message MsgCreateActionExecutorResponse {
  string nftSchemaCode = 1;
  string executorAddress = 2;
}

message MsgUpdateActionExecutor {
  string creator = 1;
  string nftSchemaCode = 2;
  string executorAddress = 3;

}
message MsgUpdateActionExecutorResponse {
  string nftSchemaCode = 1;
  string executorAddress = 2;
}

message MsgDeleteActionExecutor {
  string creator = 1;
  string nftSchemaCode = 2;
  string executorAddress = 3;
}
message MsgDeleteActionExecutorResponse {
  string nftSchemaCode = 1;
  string executorAddress = 2;
}

message MsgUpdateSchemaAttribute {
  string creator = 1;
  string nftSchemaCode = 2;
  string Base64UpdateAttriuteDefenition = 3;
}

message MsgUpdateSchemaAttributeResponse {
  string nftSchemaCode = 1;
  string name = 2;
  SchemaAttribute new_attribute = 3;
}

// message MsgDeleteSchemaAttribute {
//   string creator = 1;
//   string nftSchemaCode = 2;
//   string name = 3;
// }
// message MsgDeleteSchemaAttributeResponse {
//   string nftSchemaCode = 1;
//   string name = 2;
// }

message MsgUpdateAction {
  string creator = 1;
  string nftSchemaCode = 2;
  string base64UpdateAction = 3;
}

message MsgUpdateActionResponse {
  string nftSchemaCode = 1;
  string name = 2;
}

// this line is used by starport scaffolding # proto/tx/message
