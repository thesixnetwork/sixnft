syntax = "proto3";
package sixnft.nftmngr;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "nftmngr/params.proto";
import "nftmngr/nft_schema.proto";
// this line is used by starport scaffolding # 1

option go_package = "sixnft/x/nftmngr/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sixnft/nftmngr/params";
  }
  // Queries a NFTSchema by index.
	rpc NFTSchema(QueryGetNFTSchemaRequest) returns (QueryGetNFTSchemaResponse) {
		option (google.api.http).get = "/sixnft/nftmngr/nft_schema/{code}";
	}

	// Queries a list of NFTSchema items.
	rpc NFTSchemaAll(QueryAllNFTSchemaRequest) returns (QueryAllNFTSchemaResponse) {
		option (google.api.http).get = "/sixnft/nftmngr/nft_schema";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetNFTSchemaRequest {
	  string code = 1;

}

message QueryGetNFTSchemaResponse {
	NFTSchema nFTSchema = 1 [(gogoproto.nullable) = false];
}

message QueryAllNFTSchemaRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNFTSchemaResponse {
	repeated NFTSchema nFTSchema = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
