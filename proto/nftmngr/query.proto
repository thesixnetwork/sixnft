syntax = "proto3";
package thesixnetwork.sixnft.nftmngr;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "nftmngr/params.proto";
import "nftmngr/nft_schema.proto";
import "nftmngr/action_by_ref_id.proto";
import "nftmngr/organization.proto";
import "nftmngr/nft_schema_by_contract.proto";
import "nftmngr/nft_fee_config.proto";
import "nftmngr/nft_fee_balance.proto";
import "nftmngr/metadata_creator.proto";
// this line is used by starport scaffolding # 1
import "nftmngr/nft_data.proto";

option go_package = "github.com/thesixnetwork/sixnft/x/nftmngr/types";

// Query defines the gRPC querier service.
service Query {
	// Parameters queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/params";
	}
  	// Queries a NFTSchema by index.
	rpc NFTSchema(QueryGetNFTSchemaRequest) returns (QueryGetNFTSchemaResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema/{code}";
	}

	// Queries a NFTSchema by index.
	rpc NFTSchemaV063(QueryGetNFTSchemaRequest) returns (QueryGetNFTSchemaResponseV063) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema_063/{code}";
	}

	// Queries a list of NFTSchema items.
	rpc NFTSchemaAll(QueryAllNFTSchemaRequest) returns (QueryAllNFTSchemaResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema";
	}

	// Queries a list of NFTSchema items.
	rpc NFTSchemaAllV063(QueryAllNFTSchemaRequest) returns (QueryAllNFTSchemaResponseV063) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema_v063";
	}

// Queries a NftData by index.
	rpc NftData(QueryGetNftDataRequest) returns (QueryGetNftDataResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_data/{nftSchemaCode}/{tokenId}";
	}

	// Queries a list of NftData items.
	rpc NftDataAll(QueryAllNftDataRequest) returns (QueryAllNftDataResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_data";
	}

// Queries a ActionByRefId by index.
	rpc ActionByRefId(QueryGetActionByRefIdRequest) returns (QueryGetActionByRefIdResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/action_by_ref_id/{refId}";
	}

	// Queries a list of ActionByRefId items.
	rpc ActionByRefIdAll(QueryAllActionByRefIdRequest) returns (QueryAllActionByRefIdResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/action_by_ref_id";
	}

// Queries a Organization by index.
	rpc Organization(QueryGetOrganizationRequest) returns (QueryGetOrganizationResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/organization/{name}";
	}

	// Queries a list of Organization items.
	rpc OrganizationAll(QueryAllOrganizationRequest) returns (QueryAllOrganizationResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/organization";
	}

// Queries a NFTSchemaByContract by index.
	rpc NFTSchemaByContract(QueryGetNFTSchemaByContractRequest) returns (QueryGetNFTSchemaByContractResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema_by_contract/{originContractAddress}";
	}

	// Queries a list of NFTSchemaByContract items.
	rpc NFTSchemaByContractAll(QueryAllNFTSchemaByContractRequest) returns (QueryAllNFTSchemaByContractResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_schema_by_contract";
	}

// Queries a NFTFeeConfig by index.
	rpc NFTFeeConfig(QueryGetNFTFeeConfigRequest) returns (QueryGetNFTFeeConfigResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_fee_config";
	}
// Queries a NFTFeeBalance by index.
	rpc NFTFeeBalance(QueryGetNFTFeeBalanceRequest) returns (QueryGetNFTFeeBalanceResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/nft_fee_balance";
	}
// Queries a MetadataCreator by index.
	rpc MetadataCreator(QueryGetMetadataCreatorRequest) returns (QueryGetMetadataCreatorResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/metadata_creator/{nftSchemaCode}";
	}

	// Queries a list of MetadataCreator items.
	rpc MetadataCreatorAll(QueryAllMetadataCreatorRequest) returns (QueryAllMetadataCreatorResponse) {
		option (google.api.http).get = "/thesixnetwork/sixnft/nftmngr/metadata_creator";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetNFTSchemaRequest {
	  string code = 1;
}

message QueryGetNFTSchemaResponse {
	NFTSchema nFTSchema = 1 [(gogoproto.nullable) = false];
}

message QueryGetNFTSchemaResponseV063 {
	NFTSchemaV063 nFTSchemaV063 = 1 [(gogoproto.nullable) = false];
}

message QueryAllNFTSchemaRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNFTSchemaResponse {
	repeated NFTSchema nFTSchema = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllNFTSchemaResponseV063 {
	repeated NFTSchemaV063 nFTSchemaV063 = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNftDataRequest {
	string nftSchemaCode = 1;
  	string tokenId = 2;

}

message QueryGetNftDataResponse {
	NftData nftData = 1 [(gogoproto.nullable) = false];
}

message QueryAllNftDataRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNftDataResponse {
	repeated NftData nftData = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetActionByRefIdRequest {
	  string refId = 1;

}

message QueryGetActionByRefIdResponse {
	ActionByRefId actionByRefId = 1 [(gogoproto.nullable) = false];
}

message QueryAllActionByRefIdRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllActionByRefIdResponse {
	repeated ActionByRefId actionByRefId = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetOrganizationRequest {
	  string name = 1;

}

message QueryGetOrganizationResponse {
	Organization organization = 1 [(gogoproto.nullable) = false];
}

message QueryAllOrganizationRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOrganizationResponse {
	repeated Organization organization = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNFTSchemaByContractRequest {
	  string originContractAddress = 1;
}

message QueryGetNFTSchemaByContractResponse {
	NFTSchemaByContract nFTSchemaByContract = 1 [(gogoproto.nullable) = false];
}

message QueryAllNFTSchemaByContractRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNFTSchemaByContractResponse {
	repeated NFTSchemaByContract nFTSchemaByContract = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNFTFeeConfigRequest {}

message QueryGetNFTFeeConfigResponse {
	NFTFeeConfig NFTFeeConfig = 1 [(gogoproto.nullable) = false];
}
message QueryGetNFTFeeBalanceRequest {}

message QueryGetNFTFeeBalanceResponse {
	NFTFeeBalance NFTFeeBalance = 1 [(gogoproto.nullable) = false];
}
message QueryGetMetadataCreatorRequest {
	  string nftSchemaCode = 1;

}

message QueryGetMetadataCreatorResponse {
	MetadataCreator metadataCreator = 1 [(gogoproto.nullable) = false];
}

message QueryAllMetadataCreatorRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMetadataCreatorResponse {
	repeated MetadataCreator metadataCreator = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
