// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgGrantPermission } from "./types/admin/tx";
import { MsgBurn } from "./types/admin/tx";
import { MsgMint } from "./types/admin/tx";
import { MsgRevokePermission } from "./types/admin/tx";


export { MsgGrantPermission, MsgBurn, MsgMint, MsgRevokePermission };

type sendMsgGrantPermissionParams = {
  value: MsgGrantPermission,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnParams = {
  value: MsgBurn,
  fee?: StdFee,
  memo?: string
};

type sendMsgMintParams = {
  value: MsgMint,
  fee?: StdFee,
  memo?: string
};

type sendMsgRevokePermissionParams = {
  value: MsgRevokePermission,
  fee?: StdFee,
  memo?: string
};


type msgGrantPermissionParams = {
  value: MsgGrantPermission,
};

type msgBurnParams = {
  value: MsgBurn,
};

type msgMintParams = {
  value: MsgMint,
};

type msgRevokePermissionParams = {
  value: MsgRevokePermission,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgGrantPermission({ value, fee, memo }: sendMsgGrantPermissionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgGrantPermission: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgGrantPermission({ value: MsgGrantPermission.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgGrantPermission: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurn({ value, fee, memo }: sendMsgBurnParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBurn({ value: MsgBurn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgMint({ value, fee, memo }: sendMsgMintParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgMint: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgMint({ value: MsgMint.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgMint: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRevokePermission({ value, fee, memo }: sendMsgRevokePermissionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRevokePermission: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRevokePermission({ value: MsgRevokePermission.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRevokePermission: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgGrantPermission({ value }: msgGrantPermissionParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.admin.MsgGrantPermission", value: MsgGrantPermission.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgGrantPermission: Could not create message: ' + e.message)
			}
		},
		
		msgBurn({ value }: msgBurnParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.admin.MsgBurn", value: MsgBurn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurn: Could not create message: ' + e.message)
			}
		},
		
		msgMint({ value }: msgMintParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.admin.MsgMint", value: MsgMint.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgMint: Could not create message: ' + e.message)
			}
		},
		
		msgRevokePermission({ value }: msgRevokePermissionParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.admin.MsgRevokePermission", value: MsgRevokePermission.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRevokePermission: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SixnftAdmin: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;