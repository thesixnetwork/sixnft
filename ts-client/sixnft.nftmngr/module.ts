// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateMetadata } from "./types/nftmngr/tx";
import { MsgSetNFTAttribute } from "./types/nftmngr/tx";
import { MsgPerformActionByAdmin } from "./types/nftmngr/tx";
import { MsgAddAttribute } from "./types/nftmngr/tx";
import { MsgCreateNFTSchema } from "./types/nftmngr/tx";
import { MsgAddTokenAttribute } from "./types/nftmngr/tx";
import { MsgAddAction } from "./types/nftmngr/tx";


export { MsgCreateMetadata, MsgSetNFTAttribute, MsgPerformActionByAdmin, MsgAddAttribute, MsgCreateNFTSchema, MsgAddTokenAttribute, MsgAddAction };

type sendMsgCreateMetadataParams = {
  value: MsgCreateMetadata,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetNFTAttributeParams = {
  value: MsgSetNFTAttribute,
  fee?: StdFee,
  memo?: string
};

type sendMsgPerformActionByAdminParams = {
  value: MsgPerformActionByAdmin,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddAttributeParams = {
  value: MsgAddAttribute,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateNFTSchemaParams = {
  value: MsgCreateNFTSchema,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddTokenAttributeParams = {
  value: MsgAddTokenAttribute,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddActionParams = {
  value: MsgAddAction,
  fee?: StdFee,
  memo?: string
};


type msgCreateMetadataParams = {
  value: MsgCreateMetadata,
};

type msgSetNFTAttributeParams = {
  value: MsgSetNFTAttribute,
};

type msgPerformActionByAdminParams = {
  value: MsgPerformActionByAdmin,
};

type msgAddAttributeParams = {
  value: MsgAddAttribute,
};

type msgCreateNFTSchemaParams = {
  value: MsgCreateNFTSchema,
};

type msgAddTokenAttributeParams = {
  value: MsgAddTokenAttribute,
};

type msgAddActionParams = {
  value: MsgAddAction,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateMetadata({ value, fee, memo }: sendMsgCreateMetadataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateMetadata: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateMetadata({ value: MsgCreateMetadata.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateMetadata: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetNFTAttribute({ value, fee, memo }: sendMsgSetNFTAttributeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetNFTAttribute: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetNFTAttribute({ value: MsgSetNFTAttribute.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetNFTAttribute: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPerformActionByAdmin({ value, fee, memo }: sendMsgPerformActionByAdminParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPerformActionByAdmin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgPerformActionByAdmin({ value: MsgPerformActionByAdmin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPerformActionByAdmin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddAttribute({ value, fee, memo }: sendMsgAddAttributeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddAttribute: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddAttribute({ value: MsgAddAttribute.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddAttribute: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateNFTSchema({ value, fee, memo }: sendMsgCreateNFTSchemaParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateNFTSchema: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateNFTSchema({ value: MsgCreateNFTSchema.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateNFTSchema: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddTokenAttribute({ value, fee, memo }: sendMsgAddTokenAttributeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddTokenAttribute: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddTokenAttribute({ value: MsgAddTokenAttribute.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddTokenAttribute: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddAction({ value, fee, memo }: sendMsgAddActionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddAction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddAction({ value: MsgAddAction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddAction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateMetadata({ value }: msgCreateMetadataParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgCreateMetadata", value: MsgCreateMetadata.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateMetadata: Could not create message: ' + e.message)
			}
		},
		
		msgSetNFTAttribute({ value }: msgSetNFTAttributeParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgSetNFTAttribute", value: MsgSetNFTAttribute.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetNFTAttribute: Could not create message: ' + e.message)
			}
		},
		
		msgPerformActionByAdmin({ value }: msgPerformActionByAdminParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgPerformActionByAdmin", value: MsgPerformActionByAdmin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPerformActionByAdmin: Could not create message: ' + e.message)
			}
		},
		
		msgAddAttribute({ value }: msgAddAttributeParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgAddAttribute", value: MsgAddAttribute.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddAttribute: Could not create message: ' + e.message)
			}
		},
		
		msgCreateNFTSchema({ value }: msgCreateNFTSchemaParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgCreateNFTSchema", value: MsgCreateNFTSchema.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateNFTSchema: Could not create message: ' + e.message)
			}
		},
		
		msgAddTokenAttribute({ value }: msgAddTokenAttributeParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgAddTokenAttribute", value: MsgAddTokenAttribute.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddTokenAttribute: Could not create message: ' + e.message)
			}
		},
		
		msgAddAction({ value }: msgAddActionParams): EncodeObject {
			try {
				return { typeUrl: "/sixnft.nftmngr.MsgAddAction", value: MsgAddAction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddAction: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SixnftNftmngr: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;